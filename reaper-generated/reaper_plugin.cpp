// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
#include "reaper_plugin.h"

using namespace System;
using namespace System::Runtime::InteropServices;

reaper_plugin_functions::ReaperPluginInfoT::ReaperPluginInfoT(::reaper_plugin_info_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::ReaperPluginInfoT^ reaper_plugin_functions::ReaperPluginInfoT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::ReaperPluginInfoT((::reaper_plugin_info_t*) native.ToPointer());
}

reaper_plugin_functions::ReaperPluginInfoT::ReaperPluginInfoT(::reaper_plugin_info_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::ReaperPluginInfoT^ reaper_plugin_functions::ReaperPluginInfoT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::ReaperPluginInfoT((::reaper_plugin_info_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::ReaperPluginInfoT::~ReaperPluginInfoT()
{
    delete NativePtr;
}

reaper_plugin_functions::ReaperPluginInfoT::ReaperPluginInfoT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::reaper_plugin_info_t();
}

reaper_plugin_functions::ReaperPluginInfoT::ReaperPluginInfoT(reaper_plugin_functions::ReaperPluginInfoT^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::reaper_plugin_info_t*)_0->NativePtr;
    NativePtr = new ::reaper_plugin_info_t(__arg0);
}

System::IntPtr reaper_plugin_functions::ReaperPluginInfoT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::ReaperPluginInfoT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::reaper_plugin_info_t*)object.ToPointer();
}

int reaper_plugin_functions::ReaperPluginInfoT::CallerVersion::get()
{
    return ((::reaper_plugin_info_t*)NativePtr)->caller_version;
}

void reaper_plugin_functions::ReaperPluginInfoT::CallerVersion::set(int value)
{
    ((::reaper_plugin_info_t*)NativePtr)->caller_version = value;
}

HWND_^ reaper_plugin_functions::ReaperPluginInfoT::HwndMain::get()
{
    return (((::reaper_plugin_info_t*)NativePtr)->hwnd_main == nullptr) ? nullptr : gcnew ::HWND_((::HWND__*)((::reaper_plugin_info_t*)NativePtr)->hwnd_main);
}

void reaper_plugin_functions::ReaperPluginInfoT::HwndMain::set(HWND_^ value)
{
    ((::reaper_plugin_info_t*)NativePtr)->hwnd_main = (::HWND__*)value->NativePtr;
}

reaper_plugin_functions::ReaperPluginInfoT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr^ reaper_plugin_functions::ReaperPluginInfoT::Register::get()
{
    return ((::reaper_plugin_info_t*)NativePtr)->Register == nullptr ? nullptr : safe_cast<reaper_plugin_functions::ReaperPluginInfoT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::reaper_plugin_info_t*)NativePtr)->Register), reaper_plugin_functions::ReaperPluginInfoT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr::typeid));
}

void reaper_plugin_functions::ReaperPluginInfoT::Register::set(reaper_plugin_functions::ReaperPluginInfoT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr^ value)
{
    ((::reaper_plugin_info_t*)NativePtr)->Register = static_cast<int (*)(void*, void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

::reaper_plugin_functions::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^ reaper_plugin_functions::ReaperPluginInfoT::GetFunc::get()
{
    return ((::reaper_plugin_info_t*)NativePtr)->GetFunc == nullptr ? nullptr : safe_cast<::reaper_plugin_functions::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::reaper_plugin_info_t*)NativePtr)->GetFunc), ::reaper_plugin_functions::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string::typeid));
}

void reaper_plugin_functions::ReaperPluginInfoT::GetFunc::set(::reaper_plugin_functions::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^ value)
{
    ((::reaper_plugin_info_t*)NativePtr)->GetFunc = static_cast<void* (*)(void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::ProjectStateContext::ProjectStateContext(::ProjectStateContext* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::ProjectStateContext^ reaper_plugin_functions::ProjectStateContext::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::ProjectStateContext((::ProjectStateContext*) native.ToPointer());
}

reaper_plugin_functions::ProjectStateContext::ProjectStateContext(::ProjectStateContext* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::ProjectStateContext^ reaper_plugin_functions::ProjectStateContext::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::ProjectStateContext((::ProjectStateContext*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::ProjectStateContext::~ProjectStateContext()
{
    delete NativePtr;
}

void reaper_plugin_functions::ProjectStateContext::AddLine(System::String^ fmt)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(fmt);
    auto __arg0 = ___arg0.c_str();
    ((::ProjectStateContext*)NativePtr)->AddLine(__arg0);
}

int reaper_plugin_functions::ProjectStateContext::GetLine(char* buf, int buflen)
{
    auto __arg0 = (char*)buf;
    auto __ret = ((::ProjectStateContext*)NativePtr)->GetLine(__arg0, buflen);
    return __ret;
}

reaper_plugin_functions::ProjectStateContext::ProjectStateContext()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::ProjectStateContext::ProjectStateContext(reaper_plugin_functions::ProjectStateContext^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::ProjectStateContext::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::ProjectStateContext::__Instance::set(System::IntPtr object)
{
    NativePtr = (::ProjectStateContext*)object.ToPointer();
}

long long reaper_plugin_functions::ProjectStateContext::OutputSize::get()
{
    auto __ret = ((::ProjectStateContext*)NativePtr)->GetOutputSize();
    return __ret;
}

int reaper_plugin_functions::ProjectStateContext::TempFlag::get()
{
    auto __ret = ((::ProjectStateContext*)NativePtr)->GetTempFlag();
    return __ret;
}

void reaper_plugin_functions::ProjectStateContext::TempFlag::set(int flag)
{
    ((::ProjectStateContext*)NativePtr)->SetTempFlag(flag);
}

reaper_plugin_functions::MIDI_event_t::MIDI_event_t(::MIDI_event_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::MIDI_event_t^ reaper_plugin_functions::MIDI_event_t::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::MIDI_event_t((::MIDI_event_t*) native.ToPointer());
}

reaper_plugin_functions::MIDI_event_t::MIDI_event_t(::MIDI_event_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::MIDI_event_t^ reaper_plugin_functions::MIDI_event_t::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::MIDI_event_t((::MIDI_event_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::MIDI_event_t::~MIDI_event_t()
{
    delete NativePtr;
}

reaper_plugin_functions::MIDI_event_t::MIDI_event_t()
{
    __ownsNativeInstance = true;
    NativePtr = new ::MIDI_event_t();
}

reaper_plugin_functions::MIDI_event_t::MIDI_event_t(reaper_plugin_functions::MIDI_event_t^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::MIDI_event_t*)_0->NativePtr;
    NativePtr = new ::MIDI_event_t(__arg0);
}

System::IntPtr reaper_plugin_functions::MIDI_event_t::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::MIDI_event_t::__Instance::set(System::IntPtr object)
{
    NativePtr = (::MIDI_event_t*)object.ToPointer();
}

int reaper_plugin_functions::MIDI_event_t::FrameOffset::get()
{
    return ((::MIDI_event_t*)NativePtr)->frame_offset;
}

void reaper_plugin_functions::MIDI_event_t::FrameOffset::set(int value)
{
    ((::MIDI_event_t*)NativePtr)->frame_offset = value;
}

int reaper_plugin_functions::MIDI_event_t::Size::get()
{
    return ((::MIDI_event_t*)NativePtr)->size;
}

void reaper_plugin_functions::MIDI_event_t::Size::set(int value)
{
    ((::MIDI_event_t*)NativePtr)->size = value;
}

cli::array<unsigned char>^ reaper_plugin_functions::MIDI_event_t::MidiMessage::get()
{
    cli::array<unsigned char>^ __array0 = nullptr;
    if (((::MIDI_event_t*)NativePtr)->midi_message != 0)
    {
        __array0 = gcnew cli::array<unsigned char>(4);
        for (int i = 0; i < 4; i++)
            __array0[i] = ((::MIDI_event_t*)NativePtr)->midi_message[i];
    }
    return __array0;
}

void reaper_plugin_functions::MIDI_event_t::MidiMessage::set(cli::array<unsigned char>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 4)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 4; i++)
            ((::MIDI_event_t*)NativePtr)->midi_message[i] = value[i];
    }
}

bool reaper_plugin_functions::MIDI_event_t::IsNote::get()
{
    auto __ret = ((::MIDI_event_t*)NativePtr)->is_note();
    return __ret;
}

bool reaper_plugin_functions::MIDI_event_t::IsNoteOn::get()
{
    auto __ret = ((::MIDI_event_t*)NativePtr)->is_note_on();
    return __ret;
}

bool reaper_plugin_functions::MIDI_event_t::IsNoteOff::get()
{
    auto __ret = ((::MIDI_event_t*)NativePtr)->is_note_off();
    return __ret;
}

reaper_plugin_functions::MIDI_eventlist::MIDI_eventlist(::MIDI_eventlist* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::MIDI_eventlist^ reaper_plugin_functions::MIDI_eventlist::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::MIDI_eventlist((::MIDI_eventlist*) native.ToPointer());
}

reaper_plugin_functions::MIDI_eventlist::MIDI_eventlist(::MIDI_eventlist* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::MIDI_eventlist^ reaper_plugin_functions::MIDI_eventlist::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::MIDI_eventlist((::MIDI_eventlist*) native.ToPointer(), __ownsNativeInstance);
}

void reaper_plugin_functions::MIDI_eventlist::AddItem(reaper_plugin_functions::MIDI_event_t^ evt)
{
    auto __arg0 = (::MIDI_event_t*)evt->NativePtr;
    ((::MIDI_eventlist*)NativePtr)->AddItem(__arg0);
}

reaper_plugin_functions::MIDI_event_t^ reaper_plugin_functions::MIDI_eventlist::EnumItems([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] int% bpos)
{
    int __arg0 = bpos;
    auto __ret = ((::MIDI_eventlist*)NativePtr)->EnumItems(&__arg0);
    bpos = __arg0;
    if (__ret == nullptr) return nullptr;
    return (__ret == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::MIDI_event_t((::MIDI_event_t*)__ret);
}

void reaper_plugin_functions::MIDI_eventlist::DeleteItem(int bpos)
{
    ((::MIDI_eventlist*)NativePtr)->DeleteItem(bpos);
}

void reaper_plugin_functions::MIDI_eventlist::Empty()
{
    ((::MIDI_eventlist*)NativePtr)->Empty();
}

reaper_plugin_functions::MIDI_eventlist::MIDI_eventlist()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::MIDI_eventlist::MIDI_eventlist(reaper_plugin_functions::MIDI_eventlist^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::MIDI_eventlist::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::MIDI_eventlist::__Instance::set(System::IntPtr object)
{
    NativePtr = (::MIDI_eventlist*)object.ToPointer();
}

int reaper_plugin_functions::MIDI_eventlist::Size::get()
{
    auto __ret = ((::MIDI_eventlist*)NativePtr)->GetSize();
    return __ret;
}

reaper_plugin_functions::MIDI_eventprops::MIDI_eventprops(::MIDI_eventprops* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::MIDI_eventprops^ reaper_plugin_functions::MIDI_eventprops::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::MIDI_eventprops((::MIDI_eventprops*) native.ToPointer());
}

reaper_plugin_functions::MIDI_eventprops::MIDI_eventprops(::MIDI_eventprops* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::MIDI_eventprops^ reaper_plugin_functions::MIDI_eventprops::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::MIDI_eventprops((::MIDI_eventprops*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::MIDI_eventprops::~MIDI_eventprops()
{
    delete NativePtr;
}

reaper_plugin_functions::MIDI_eventprops::MIDI_eventprops()
{
    __ownsNativeInstance = true;
    NativePtr = new ::MIDI_eventprops();
}

reaper_plugin_functions::MIDI_eventprops::MIDI_eventprops(reaper_plugin_functions::MIDI_eventprops^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::MIDI_eventprops*)__0->NativePtr;
    NativePtr = new ::MIDI_eventprops(__arg0);
}

System::IntPtr reaper_plugin_functions::MIDI_eventprops::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::MIDI_eventprops::__Instance::set(System::IntPtr object)
{
    NativePtr = (::MIDI_eventprops*)object.ToPointer();
}

double reaper_plugin_functions::MIDI_eventprops::Ppqpos::get()
{
    return ((::MIDI_eventprops*)NativePtr)->ppqpos;
}

void reaper_plugin_functions::MIDI_eventprops::Ppqpos::set(double value)
{
    ((::MIDI_eventprops*)NativePtr)->ppqpos = value;
}

double reaper_plugin_functions::MIDI_eventprops::PpqposEndOrBezierTension::get()
{
    return ((::MIDI_eventprops*)NativePtr)->ppqpos_end_or_bezier_tension;
}

void reaper_plugin_functions::MIDI_eventprops::PpqposEndOrBezierTension::set(double value)
{
    ((::MIDI_eventprops*)NativePtr)->ppqpos_end_or_bezier_tension = value;
}

char reaper_plugin_functions::MIDI_eventprops::Flag::get()
{
    return ((::MIDI_eventprops*)NativePtr)->flag;
}

void reaper_plugin_functions::MIDI_eventprops::Flag::set(char value)
{
    ((::MIDI_eventprops*)NativePtr)->flag = value;
}

cli::array<unsigned char>^ reaper_plugin_functions::MIDI_eventprops::Msg::get()
{
    cli::array<unsigned char>^ __array0 = nullptr;
    if (((::MIDI_eventprops*)NativePtr)->msg != 0)
    {
        __array0 = gcnew cli::array<unsigned char>(3);
        for (int i = 0; i < 3; i++)
            __array0[i] = ((::MIDI_eventprops*)NativePtr)->msg[i];
    }
    return __array0;
}

void reaper_plugin_functions::MIDI_eventprops::Msg::set(cli::array<unsigned char>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 3)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 3; i++)
            ((::MIDI_eventprops*)NativePtr)->msg[i] = value[i];
    }
}

char* reaper_plugin_functions::MIDI_eventprops::Varmsg::get()
{
    return ((::MIDI_eventprops*)NativePtr)->varmsg;
}

void reaper_plugin_functions::MIDI_eventprops::Varmsg::set(char* value)
{
    ((::MIDI_eventprops*)NativePtr)->varmsg = (char*)value;
}

int reaper_plugin_functions::MIDI_eventprops::Varmsglen::get()
{
    return ((::MIDI_eventprops*)NativePtr)->varmsglen;
}

void reaper_plugin_functions::MIDI_eventprops::Varmsglen::set(int value)
{
    ((::MIDI_eventprops*)NativePtr)->varmsglen = value;
}

int reaper_plugin_functions::MIDI_eventprops::Setflag::get()
{
    return ((::MIDI_eventprops*)NativePtr)->setflag;
}

void reaper_plugin_functions::MIDI_eventprops::Setflag::set(int value)
{
    ((::MIDI_eventprops*)NativePtr)->setflag = value;
}

reaper_plugin_functions::PCM_source_transfer_t::PCM_source_transfer_t(::PCM_source_transfer_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PCM_source_transfer_t^ reaper_plugin_functions::PCM_source_transfer_t::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PCM_source_transfer_t((::PCM_source_transfer_t*) native.ToPointer());
}

reaper_plugin_functions::PCM_source_transfer_t::PCM_source_transfer_t(::PCM_source_transfer_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PCM_source_transfer_t^ reaper_plugin_functions::PCM_source_transfer_t::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PCM_source_transfer_t((::PCM_source_transfer_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PCM_source_transfer_t::~PCM_source_transfer_t()
{
    delete NativePtr;
}

reaper_plugin_functions::PCM_source_transfer_t::PCM_source_transfer_t()
{
    __ownsNativeInstance = true;
    NativePtr = new ::PCM_source_transfer_t();
}

reaper_plugin_functions::PCM_source_transfer_t::PCM_source_transfer_t(reaper_plugin_functions::PCM_source_transfer_t^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::PCM_source_transfer_t*)__0->NativePtr;
    NativePtr = new ::PCM_source_transfer_t(__arg0);
}

System::IntPtr reaper_plugin_functions::PCM_source_transfer_t::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PCM_source_transfer_t::__Instance::set(System::IntPtr object)
{
    NativePtr = (::PCM_source_transfer_t*)object.ToPointer();
}

double reaper_plugin_functions::PCM_source_transfer_t::TimeS::get()
{
    return ((::PCM_source_transfer_t*)NativePtr)->time_s;
}

void reaper_plugin_functions::PCM_source_transfer_t::TimeS::set(double value)
{
    ((::PCM_source_transfer_t*)NativePtr)->time_s = value;
}

double reaper_plugin_functions::PCM_source_transfer_t::Samplerate::get()
{
    return ((::PCM_source_transfer_t*)NativePtr)->samplerate;
}

void reaper_plugin_functions::PCM_source_transfer_t::Samplerate::set(double value)
{
    ((::PCM_source_transfer_t*)NativePtr)->samplerate = value;
}

int reaper_plugin_functions::PCM_source_transfer_t::Nch::get()
{
    return ((::PCM_source_transfer_t*)NativePtr)->nch;
}

void reaper_plugin_functions::PCM_source_transfer_t::Nch::set(int value)
{
    ((::PCM_source_transfer_t*)NativePtr)->nch = value;
}

int reaper_plugin_functions::PCM_source_transfer_t::Length::get()
{
    return ((::PCM_source_transfer_t*)NativePtr)->length;
}

void reaper_plugin_functions::PCM_source_transfer_t::Length::set(int value)
{
    ((::PCM_source_transfer_t*)NativePtr)->length = value;
}

double* reaper_plugin_functions::PCM_source_transfer_t::Samples::get()
{
    return reinterpret_cast<double*>(((::PCM_source_transfer_t*)NativePtr)->samples);
}

void reaper_plugin_functions::PCM_source_transfer_t::Samples::set(double* value)
{
    ((::PCM_source_transfer_t*)NativePtr)->samples = (ReaSample*)value;
}

int reaper_plugin_functions::PCM_source_transfer_t::SamplesOut::get()
{
    return ((::PCM_source_transfer_t*)NativePtr)->samples_out;
}

void reaper_plugin_functions::PCM_source_transfer_t::SamplesOut::set(int value)
{
    ((::PCM_source_transfer_t*)NativePtr)->samples_out = value;
}

reaper_plugin_functions::MIDI_eventlist^ reaper_plugin_functions::PCM_source_transfer_t::MidiEvents::get()
{
    return (((::PCM_source_transfer_t*)NativePtr)->midi_events == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::MIDI_eventlist((::MIDI_eventlist*)((::PCM_source_transfer_t*)NativePtr)->midi_events);
}

void reaper_plugin_functions::PCM_source_transfer_t::MidiEvents::set(reaper_plugin_functions::MIDI_eventlist^ value)
{
    ((::PCM_source_transfer_t*)NativePtr)->midi_events = (::MIDI_eventlist*)value->NativePtr;
}

double reaper_plugin_functions::PCM_source_transfer_t::ApproximatePlaybackLatency::get()
{
    return ((::PCM_source_transfer_t*)NativePtr)->approximate_playback_latency;
}

void reaper_plugin_functions::PCM_source_transfer_t::ApproximatePlaybackLatency::set(double value)
{
    ((::PCM_source_transfer_t*)NativePtr)->approximate_playback_latency = value;
}

double reaper_plugin_functions::PCM_source_transfer_t::AbsoluteTimeS::get()
{
    return ((::PCM_source_transfer_t*)NativePtr)->absolute_time_s;
}

void reaper_plugin_functions::PCM_source_transfer_t::AbsoluteTimeS::set(double value)
{
    ((::PCM_source_transfer_t*)NativePtr)->absolute_time_s = value;
}

double reaper_plugin_functions::PCM_source_transfer_t::ForceBpm::get()
{
    return ((::PCM_source_transfer_t*)NativePtr)->force_bpm;
}

void reaper_plugin_functions::PCM_source_transfer_t::ForceBpm::set(double value)
{
    ((::PCM_source_transfer_t*)NativePtr)->force_bpm = value;
}

reaper_plugin_functions::PCM_source_peaktransfer_t::PCM_source_peaktransfer_t(::PCM_source_peaktransfer_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PCM_source_peaktransfer_t^ reaper_plugin_functions::PCM_source_peaktransfer_t::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PCM_source_peaktransfer_t((::PCM_source_peaktransfer_t*) native.ToPointer());
}

reaper_plugin_functions::PCM_source_peaktransfer_t::PCM_source_peaktransfer_t(::PCM_source_peaktransfer_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PCM_source_peaktransfer_t^ reaper_plugin_functions::PCM_source_peaktransfer_t::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PCM_source_peaktransfer_t((::PCM_source_peaktransfer_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PCM_source_peaktransfer_t::~PCM_source_peaktransfer_t()
{
    delete NativePtr;
}

int reaper_plugin_functions::PCM_source_peaktransfer_t::ExtraBlocksize(int extra_requested_data_type)
{
    auto __ret = ::PCM_source_peaktransfer_t::extra_blocksize(extra_requested_data_type);
    return __ret;
}

reaper_plugin_functions::PCM_source_peaktransfer_t::PCM_source_peaktransfer_t()
{
    __ownsNativeInstance = true;
    NativePtr = new ::PCM_source_peaktransfer_t();
}

reaper_plugin_functions::PCM_source_peaktransfer_t::PCM_source_peaktransfer_t(reaper_plugin_functions::PCM_source_peaktransfer_t^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::PCM_source_peaktransfer_t*)__0->NativePtr;
    NativePtr = new ::PCM_source_peaktransfer_t(__arg0);
}

System::IntPtr reaper_plugin_functions::PCM_source_peaktransfer_t::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::__Instance::set(System::IntPtr object)
{
    NativePtr = (::PCM_source_peaktransfer_t*)object.ToPointer();
}

double reaper_plugin_functions::PCM_source_peaktransfer_t::StartTime::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->start_time;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::StartTime::set(double value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->start_time = value;
}

double reaper_plugin_functions::PCM_source_peaktransfer_t::Peakrate::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->peakrate;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::Peakrate::set(double value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->peakrate = value;
}

int reaper_plugin_functions::PCM_source_peaktransfer_t::NumpeakPoints::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->numpeak_points;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::NumpeakPoints::set(int value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->numpeak_points = value;
}

int reaper_plugin_functions::PCM_source_peaktransfer_t::Nchpeaks::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->nchpeaks;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::Nchpeaks::set(int value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->nchpeaks = value;
}

double* reaper_plugin_functions::PCM_source_peaktransfer_t::Peaks::get()
{
    return reinterpret_cast<double*>(((::PCM_source_peaktransfer_t*)NativePtr)->peaks);
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::Peaks::set(double* value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->peaks = (ReaSample*)value;
}

int reaper_plugin_functions::PCM_source_peaktransfer_t::PeaksOut::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->peaks_out;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::PeaksOut::set(int value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->peaks_out = value;
}

int reaper_plugin_functions::PCM_source_peaktransfer_t::OutputMode::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->output_mode;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::OutputMode::set(int value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->output_mode = value;
}

double reaper_plugin_functions::PCM_source_peaktransfer_t::AbsoluteTimeS::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->absolute_time_s;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::AbsoluteTimeS::set(double value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->absolute_time_s = value;
}

double* reaper_plugin_functions::PCM_source_peaktransfer_t::PeaksMinvals::get()
{
    return reinterpret_cast<double*>(((::PCM_source_peaktransfer_t*)NativePtr)->peaks_minvals);
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::PeaksMinvals::set(double* value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->peaks_minvals = (ReaSample*)value;
}

int reaper_plugin_functions::PCM_source_peaktransfer_t::PeaksMinvalsUsed::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->peaks_minvals_used;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::PeaksMinvalsUsed::set(int value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->peaks_minvals_used = value;
}

double reaper_plugin_functions::PCM_source_peaktransfer_t::Samplerate::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->samplerate;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::Samplerate::set(double value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->samplerate = value;
}

int reaper_plugin_functions::PCM_source_peaktransfer_t::ExtraRequestedDataType::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->extra_requested_data_type;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::ExtraRequestedDataType::set(int value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->extra_requested_data_type = value;
}

int reaper_plugin_functions::PCM_source_peaktransfer_t::ExtraRequestedDataOut::get()
{
    return ((::PCM_source_peaktransfer_t*)NativePtr)->extra_requested_data_out;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::ExtraRequestedDataOut::set(int value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->extra_requested_data_out = value;
}

::System::IntPtr reaper_plugin_functions::PCM_source_peaktransfer_t::ExtraRequestedData::get()
{
    return ::System::IntPtr(((::PCM_source_peaktransfer_t*)NativePtr)->extra_requested_data);
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::ExtraRequestedData::set(::System::IntPtr value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->extra_requested_data = (void*)value;
}

reaper_plugin_functions::REAPER_PeakGetInterface^ reaper_plugin_functions::PCM_source_peaktransfer_t::Peakgetter::get()
{
    return (((::PCM_source_peaktransfer_t*)NativePtr)->__peakgetter == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::REAPER_PeakGetInterface((::REAPER_PeakGet_Interface*)((::PCM_source_peaktransfer_t*)NativePtr)->__peakgetter);
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::Peakgetter::set(reaper_plugin_functions::REAPER_PeakGetInterface^ value)
{
    ((::PCM_source_peaktransfer_t*)NativePtr)->__peakgetter = (::REAPER_PeakGet_Interface*)value->NativePtr;
}

cli::array<int*>^ reaper_plugin_functions::PCM_source_peaktransfer_t::Exp::get()
{
    cli::array<int*>^ __array0 = nullptr;
    if (((::PCM_source_peaktransfer_t*)NativePtr)->exp != 0)
    {
        __array0 = gcnew cli::array<int*>(26);
        for (int i = 0; i < 26; i++)
            __array0[i] = gcnew int*(&((::PCM_source_peaktransfer_t*)NativePtr)->exp[i]);
    }
    return __array0;
}

void reaper_plugin_functions::PCM_source_peaktransfer_t::Exp::set(cli::array<int*>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 26)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 26; i++)
            ((::PCM_source_peaktransfer_t*)NativePtr)->exp[i] = *value[i]->NativePtr;
    }
}

reaper_plugin_functions::MidiRealtimeWriteStructT::MidiRealtimeWriteStructT(::midi_realtime_write_struct_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::MidiRealtimeWriteStructT^ reaper_plugin_functions::MidiRealtimeWriteStructT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::MidiRealtimeWriteStructT((::midi_realtime_write_struct_t*) native.ToPointer());
}

reaper_plugin_functions::MidiRealtimeWriteStructT::MidiRealtimeWriteStructT(::midi_realtime_write_struct_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::MidiRealtimeWriteStructT^ reaper_plugin_functions::MidiRealtimeWriteStructT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::MidiRealtimeWriteStructT((::midi_realtime_write_struct_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::MidiRealtimeWriteStructT::~MidiRealtimeWriteStructT()
{
    delete NativePtr;
}

reaper_plugin_functions::MidiRealtimeWriteStructT::MidiRealtimeWriteStructT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::midi_realtime_write_struct_t();
}

reaper_plugin_functions::MidiRealtimeWriteStructT::MidiRealtimeWriteStructT(reaper_plugin_functions::MidiRealtimeWriteStructT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::midi_realtime_write_struct_t*)__0->NativePtr;
    NativePtr = new ::midi_realtime_write_struct_t(__arg0);
}

System::IntPtr reaper_plugin_functions::MidiRealtimeWriteStructT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::midi_realtime_write_struct_t*)object.ToPointer();
}

double reaper_plugin_functions::MidiRealtimeWriteStructT::GlobalTime::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->global_time;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::GlobalTime::set(double value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->global_time = value;
}

double reaper_plugin_functions::MidiRealtimeWriteStructT::GlobalItemTime::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->global_item_time;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::GlobalItemTime::set(double value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->global_item_time = value;
}

double reaper_plugin_functions::MidiRealtimeWriteStructT::Srate::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->srate;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::Srate::set(double value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->srate = value;
}

int reaper_plugin_functions::MidiRealtimeWriteStructT::Length::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->length;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::Length::set(int value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->length = value;
}

int reaper_plugin_functions::MidiRealtimeWriteStructT::Overwritemode::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->overwritemode;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::Overwritemode::set(int value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->overwritemode = value;
}

reaper_plugin_functions::MIDI_eventlist^ reaper_plugin_functions::MidiRealtimeWriteStructT::Events::get()
{
    return (((::midi_realtime_write_struct_t*)NativePtr)->events == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::MIDI_eventlist((::MIDI_eventlist*)((::midi_realtime_write_struct_t*)NativePtr)->events);
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::Events::set(reaper_plugin_functions::MIDI_eventlist^ value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->events = (::MIDI_eventlist*)value->NativePtr;
}

double reaper_plugin_functions::MidiRealtimeWriteStructT::ItemPlayrate::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->item_playrate;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::ItemPlayrate::set(double value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->item_playrate = value;
}

double reaper_plugin_functions::MidiRealtimeWriteStructT::Latency::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->latency;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::Latency::set(double value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->latency = value;
}

unsigned int* reaper_plugin_functions::MidiRealtimeWriteStructT::OverwriteActives::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->overwrite_actives;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::OverwriteActives::set(unsigned int* value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->overwrite_actives = (unsigned int*)value;
}

double reaper_plugin_functions::MidiRealtimeWriteStructT::DoNotQuantizePastSec::get()
{
    return ((::midi_realtime_write_struct_t*)NativePtr)->do_not_quantize_past_sec;
}

void reaper_plugin_functions::MidiRealtimeWriteStructT::DoNotQuantizePastSec::set(double value)
{
    ((::midi_realtime_write_struct_t*)NativePtr)->do_not_quantize_past_sec = value;
}

reaper_plugin_functions::PCM_source::PCM_source(::PCM_source* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PCM_source^ reaper_plugin_functions::PCM_source::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PCM_source((::PCM_source*) native.ToPointer());
}

reaper_plugin_functions::PCM_source::PCM_source(::PCM_source* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PCM_source^ reaper_plugin_functions::PCM_source::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PCM_source((::PCM_source*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PCM_source::~PCM_source()
{
    delete NativePtr;
}

void reaper_plugin_functions::PCM_source::SetAvailable(bool avail)
{
    ((::PCM_source*)NativePtr)->SetAvailable(avail);
}

bool reaper_plugin_functions::PCM_source::SetFileName(System::String^ newfn)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(newfn);
    auto __arg0 = ___arg0.c_str();
    auto __ret = ((::PCM_source*)NativePtr)->SetFileName(__arg0);
    return __ret;
}

int reaper_plugin_functions::PCM_source::PropertiesWindow(HWND_^ hwndParent)
{
    auto __arg0 = (::HWND__*)hwndParent->NativePtr;
    auto __ret = ((::PCM_source*)NativePtr)->PropertiesWindow(__arg0);
    return __ret;
}

void reaper_plugin_functions::PCM_source::GetSamples(reaper_plugin_functions::PCM_source_transfer_t^ block)
{
    auto __arg0 = (::PCM_source_transfer_t*)block->NativePtr;
    ((::PCM_source*)NativePtr)->GetSamples(__arg0);
}

void reaper_plugin_functions::PCM_source::GetPeakInfo(reaper_plugin_functions::PCM_source_peaktransfer_t^ block)
{
    auto __arg0 = (::PCM_source_peaktransfer_t*)block->NativePtr;
    ((::PCM_source*)NativePtr)->GetPeakInfo(__arg0);
}

void reaper_plugin_functions::PCM_source::SaveState(reaper_plugin_functions::ProjectStateContext^ ctx)
{
    auto __arg0 = (::ProjectStateContext*)ctx->NativePtr;
    ((::PCM_source*)NativePtr)->SaveState(__arg0);
}

int reaper_plugin_functions::PCM_source::LoadState(System::String^ firstline, reaper_plugin_functions::ProjectStateContext^ ctx)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(firstline);
    auto __arg0 = ___arg0.c_str();
    auto __arg1 = (::ProjectStateContext*)ctx->NativePtr;
    auto __ret = ((::PCM_source*)NativePtr)->LoadState(__arg0, __arg1);
    return __ret;
}

void reaper_plugin_functions::PCM_source::PeaksClear(bool deleteFile)
{
    ((::PCM_source*)NativePtr)->Peaks_Clear(deleteFile);
}

void reaper_plugin_functions::PCM_source::PeaksBuildFinish()
{
    ((::PCM_source*)NativePtr)->PeaksBuild_Finish();
}

int reaper_plugin_functions::PCM_source::Extended(int call, ::System::IntPtr parm1, ::System::IntPtr parm2, ::System::IntPtr parm3)
{
    auto __arg1 = (void*)parm1;
    auto __arg2 = (void*)parm2;
    auto __arg3 = (void*)parm3;
    auto __ret = ((::PCM_source*)NativePtr)->Extended(call, __arg1, __arg2, __arg3);
    return __ret;
}

reaper_plugin_functions::PCM_source::PCM_source()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::PCM_source::PCM_source(reaper_plugin_functions::PCM_source^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::PCM_source::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PCM_source::__Instance::set(System::IntPtr object)
{
    NativePtr = (::PCM_source*)object.ToPointer();
}

reaper_plugin_functions::PCM_source^ reaper_plugin_functions::PCM_source::Duplicate::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->Duplicate();
    if (__ret == nullptr) return nullptr;
    return (__ret == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::PCM_source((::PCM_source*)__ret);
}

bool reaper_plugin_functions::PCM_source::IsAvailable::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->IsAvailable();
    return __ret;
}

System::String^ reaper_plugin_functions::PCM_source::Type::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetType();
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

System::String^ reaper_plugin_functions::PCM_source::FileName::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetFileName();
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

void reaper_plugin_functions::PCM_source::FileName::set(System::String^ newfn)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(newfn);
    auto __arg0 = ___arg0.c_str();
    ((::PCM_source*)NativePtr)->SetFileName(__arg0);
}

reaper_plugin_functions::PCM_source^ reaper_plugin_functions::PCM_source::Source::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetSource();
    if (__ret == nullptr) return nullptr;
    return (__ret == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::PCM_source((::PCM_source*)__ret);
}

void reaper_plugin_functions::PCM_source::Source::set(reaper_plugin_functions::PCM_source^ src)
{
    auto __arg0 = (::PCM_source*)src->NativePtr;
    ((::PCM_source*)NativePtr)->SetSource(__arg0);
}

int reaper_plugin_functions::PCM_source::NumChannels::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetNumChannels();
    return __ret;
}

double reaper_plugin_functions::PCM_source::SampleRate::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetSampleRate();
    return __ret;
}

double reaper_plugin_functions::PCM_source::Length::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetLength();
    return __ret;
}

double reaper_plugin_functions::PCM_source::LengthBeats::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetLengthBeats();
    return __ret;
}

int reaper_plugin_functions::PCM_source::BitsPerSample::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetBitsPerSample();
    return __ret;
}

double reaper_plugin_functions::PCM_source::PreferredPosition::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->GetPreferredPosition();
    return __ret;
}

int reaper_plugin_functions::PCM_source::PeaksBuildBegin::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->PeaksBuild_Begin();
    return __ret;
}

int reaper_plugin_functions::PCM_source::PeaksBuildRun::get()
{
    auto __ret = ((::PCM_source*)NativePtr)->PeaksBuild_Run();
    return __ret;
}

reaper_plugin_functions::REAPER_cue::REAPER_cue(::REAPER_cue* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_cue^ reaper_plugin_functions::REAPER_cue::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::REAPER_cue((::REAPER_cue*) native.ToPointer());
}

reaper_plugin_functions::REAPER_cue::REAPER_cue(::REAPER_cue* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_cue^ reaper_plugin_functions::REAPER_cue::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::REAPER_cue((::REAPER_cue*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::REAPER_cue::~REAPER_cue()
{
    delete NativePtr;
}

reaper_plugin_functions::REAPER_cue::REAPER_cue()
{
    __ownsNativeInstance = true;
    NativePtr = new ::REAPER_cue();
}

reaper_plugin_functions::REAPER_cue::REAPER_cue(reaper_plugin_functions::REAPER_cue^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::REAPER_cue*)__0->NativePtr;
    NativePtr = new ::REAPER_cue(__arg0);
}

System::IntPtr reaper_plugin_functions::REAPER_cue::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::REAPER_cue::__Instance::set(System::IntPtr object)
{
    NativePtr = (::REAPER_cue*)object.ToPointer();
}

int reaper_plugin_functions::REAPER_cue::MId::get()
{
    return ((::REAPER_cue*)NativePtr)->m_id;
}

void reaper_plugin_functions::REAPER_cue::MId::set(int value)
{
    ((::REAPER_cue*)NativePtr)->m_id = value;
}

double reaper_plugin_functions::REAPER_cue::MTime::get()
{
    return ((::REAPER_cue*)NativePtr)->m_time;
}

void reaper_plugin_functions::REAPER_cue::MTime::set(double value)
{
    ((::REAPER_cue*)NativePtr)->m_time = value;
}

double reaper_plugin_functions::REAPER_cue::MEndtime::get()
{
    return ((::REAPER_cue*)NativePtr)->m_endtime;
}

void reaper_plugin_functions::REAPER_cue::MEndtime::set(double value)
{
    ((::REAPER_cue*)NativePtr)->m_endtime = value;
}

bool reaper_plugin_functions::REAPER_cue::MIsregion::get()
{
    return ((::REAPER_cue*)NativePtr)->m_isregion;
}

void reaper_plugin_functions::REAPER_cue::MIsregion::set(bool value)
{
    ((::REAPER_cue*)NativePtr)->m_isregion = value;
}

char* reaper_plugin_functions::REAPER_cue::MName::get()
{
    return ((::REAPER_cue*)NativePtr)->m_name;
}

void reaper_plugin_functions::REAPER_cue::MName::set(char* value)
{
    ((::REAPER_cue*)NativePtr)->m_name = (char*)value;
}

int reaper_plugin_functions::REAPER_cue::MFlags::get()
{
    return ((::REAPER_cue*)NativePtr)->m_flags;
}

void reaper_plugin_functions::REAPER_cue::MFlags::set(int value)
{
    ((::REAPER_cue*)NativePtr)->m_flags = value;
}

cli::array<char>^ reaper_plugin_functions::REAPER_cue::Resvd::get()
{
    cli::array<char>^ __array0 = nullptr;
    if (((::REAPER_cue*)NativePtr)->resvd != 0)
    {
        __array0 = gcnew cli::array<char>(124);
        for (int i = 0; i < 124; i++)
            __array0[i] = ((::REAPER_cue*)NativePtr)->resvd[i];
    }
    return __array0;
}

void reaper_plugin_functions::REAPER_cue::Resvd::set(cli::array<char>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 124)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 124; i++)
            ((::REAPER_cue*)NativePtr)->resvd[i] = value[i];
    }
}

reaper_plugin_functions::REAPER_slice::REAPER_slice(::REAPER_slice* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_slice^ reaper_plugin_functions::REAPER_slice::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::REAPER_slice((::REAPER_slice*) native.ToPointer());
}

reaper_plugin_functions::REAPER_slice::REAPER_slice(::REAPER_slice* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_slice^ reaper_plugin_functions::REAPER_slice::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::REAPER_slice((::REAPER_slice*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::REAPER_slice::~REAPER_slice()
{
    delete NativePtr;
}

reaper_plugin_functions::REAPER_slice::REAPER_slice()
{
    __ownsNativeInstance = true;
    NativePtr = new ::REAPER_slice();
}

reaper_plugin_functions::REAPER_slice::REAPER_slice(reaper_plugin_functions::REAPER_slice^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::REAPER_slice*)__0->NativePtr;
    NativePtr = new ::REAPER_slice(__arg0);
}

System::IntPtr reaper_plugin_functions::REAPER_slice::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::REAPER_slice::__Instance::set(System::IntPtr object)
{
    NativePtr = (::REAPER_slice*)object.ToPointer();
}

reaper_plugin_functions::PCM_source^ reaper_plugin_functions::REAPER_slice::MSliceSrc::get()
{
    return (((::REAPER_slice*)NativePtr)->m_sliceSrc == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::PCM_source((::PCM_source*)((::REAPER_slice*)NativePtr)->m_sliceSrc);
}

void reaper_plugin_functions::REAPER_slice::MSliceSrc::set(reaper_plugin_functions::PCM_source^ value)
{
    ((::REAPER_slice*)NativePtr)->m_sliceSrc = (::PCM_source*)value->NativePtr;
}

double reaper_plugin_functions::REAPER_slice::MBeatSnapOffset::get()
{
    return ((::REAPER_slice*)NativePtr)->m_beatSnapOffset;
}

void reaper_plugin_functions::REAPER_slice::MBeatSnapOffset::set(double value)
{
    ((::REAPER_slice*)NativePtr)->m_beatSnapOffset = value;
}

int reaper_plugin_functions::REAPER_slice::Flag::get()
{
    return ((::REAPER_slice*)NativePtr)->flag;
}

void reaper_plugin_functions::REAPER_slice::Flag::set(int value)
{
    ((::REAPER_slice*)NativePtr)->flag = value;
}

cli::array<char>^ reaper_plugin_functions::REAPER_slice::Resvd::get()
{
    cli::array<char>^ __array0 = nullptr;
    if (((::REAPER_slice*)NativePtr)->resvd != 0)
    {
        __array0 = gcnew cli::array<char>(124);
        for (int i = 0; i < 124; i++)
            __array0[i] = ((::REAPER_slice*)NativePtr)->resvd[i];
    }
    return __array0;
}

void reaper_plugin_functions::REAPER_slice::Resvd::set(cli::array<char>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 124)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 124; i++)
            ((::REAPER_slice*)NativePtr)->resvd[i] = value[i];
    }
}

reaper_plugin_functions::REAPER_inline_positioninfo::REAPER_inline_positioninfo(::REAPER_inline_positioninfo* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_inline_positioninfo^ reaper_plugin_functions::REAPER_inline_positioninfo::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::REAPER_inline_positioninfo((::REAPER_inline_positioninfo*) native.ToPointer());
}

reaper_plugin_functions::REAPER_inline_positioninfo::REAPER_inline_positioninfo(::REAPER_inline_positioninfo* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_inline_positioninfo^ reaper_plugin_functions::REAPER_inline_positioninfo::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::REAPER_inline_positioninfo((::REAPER_inline_positioninfo*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::REAPER_inline_positioninfo::~REAPER_inline_positioninfo()
{
    delete NativePtr;
}

reaper_plugin_functions::REAPER_inline_positioninfo::REAPER_inline_positioninfo()
{
    __ownsNativeInstance = true;
    NativePtr = new ::REAPER_inline_positioninfo();
}

reaper_plugin_functions::REAPER_inline_positioninfo::REAPER_inline_positioninfo(reaper_plugin_functions::REAPER_inline_positioninfo^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::REAPER_inline_positioninfo*)__0->NativePtr;
    NativePtr = new ::REAPER_inline_positioninfo(__arg0);
}

System::IntPtr reaper_plugin_functions::REAPER_inline_positioninfo::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::REAPER_inline_positioninfo::__Instance::set(System::IntPtr object)
{
    NativePtr = (::REAPER_inline_positioninfo*)object.ToPointer();
}

double reaper_plugin_functions::REAPER_inline_positioninfo::DrawStartTime::get()
{
    return ((::REAPER_inline_positioninfo*)NativePtr)->draw_start_time;
}

void reaper_plugin_functions::REAPER_inline_positioninfo::DrawStartTime::set(double value)
{
    ((::REAPER_inline_positioninfo*)NativePtr)->draw_start_time = value;
}

int reaper_plugin_functions::REAPER_inline_positioninfo::DrawStartY::get()
{
    return ((::REAPER_inline_positioninfo*)NativePtr)->draw_start_y;
}

void reaper_plugin_functions::REAPER_inline_positioninfo::DrawStartY::set(int value)
{
    ((::REAPER_inline_positioninfo*)NativePtr)->draw_start_y = value;
}

double reaper_plugin_functions::REAPER_inline_positioninfo::PixelsPerSecond::get()
{
    return ((::REAPER_inline_positioninfo*)NativePtr)->pixels_per_second;
}

void reaper_plugin_functions::REAPER_inline_positioninfo::PixelsPerSecond::set(double value)
{
    ((::REAPER_inline_positioninfo*)NativePtr)->pixels_per_second = value;
}

int reaper_plugin_functions::REAPER_inline_positioninfo::Width::get()
{
    return ((::REAPER_inline_positioninfo*)NativePtr)->width;
}

void reaper_plugin_functions::REAPER_inline_positioninfo::Width::set(int value)
{
    ((::REAPER_inline_positioninfo*)NativePtr)->width = value;
}

int reaper_plugin_functions::REAPER_inline_positioninfo::Height::get()
{
    return ((::REAPER_inline_positioninfo*)NativePtr)->height;
}

void reaper_plugin_functions::REAPER_inline_positioninfo::Height::set(int value)
{
    ((::REAPER_inline_positioninfo*)NativePtr)->height = value;
}

int reaper_plugin_functions::REAPER_inline_positioninfo::MouseX::get()
{
    return ((::REAPER_inline_positioninfo*)NativePtr)->mouse_x;
}

void reaper_plugin_functions::REAPER_inline_positioninfo::MouseX::set(int value)
{
    ((::REAPER_inline_positioninfo*)NativePtr)->mouse_x = value;
}

int reaper_plugin_functions::REAPER_inline_positioninfo::MouseY::get()
{
    return ((::REAPER_inline_positioninfo*)NativePtr)->mouse_y;
}

void reaper_plugin_functions::REAPER_inline_positioninfo::MouseY::set(int value)
{
    ((::REAPER_inline_positioninfo*)NativePtr)->mouse_y = value;
}

cli::array<::System::IntPtr>^ reaper_plugin_functions::REAPER_inline_positioninfo::ExtraParms::get()
{
    cli::array<::System::IntPtr>^ __array0 = nullptr;
    if (((::REAPER_inline_positioninfo*)NativePtr)->extraParms != 0)
    {
        __array0 = gcnew cli::array<::System::IntPtr>(8);
        for (int i = 0; i < 8; i++)
            __array0[i] = new ::System::IntPtr(((::REAPER_inline_positioninfo*)NativePtr)->extraParms[i]);
    }
    return __array0;
}

void reaper_plugin_functions::REAPER_inline_positioninfo::ExtraParms::set(cli::array<::System::IntPtr>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 8)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 8; i++)
            ((::REAPER_inline_positioninfo*)NativePtr)->extraParms[i] = value[i].ToPointer();
    }
}

reaper_plugin_functions::PcmsrcRegisterT::PcmsrcRegisterT(::pcmsrc_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PcmsrcRegisterT^ reaper_plugin_functions::PcmsrcRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PcmsrcRegisterT((::pcmsrc_register_t*) native.ToPointer());
}

reaper_plugin_functions::PcmsrcRegisterT::PcmsrcRegisterT(::pcmsrc_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PcmsrcRegisterT^ reaper_plugin_functions::PcmsrcRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PcmsrcRegisterT((::pcmsrc_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PcmsrcRegisterT::~PcmsrcRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::PcmsrcRegisterT::PcmsrcRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::pcmsrc_register_t();
}

reaper_plugin_functions::PcmsrcRegisterT::PcmsrcRegisterT(reaper_plugin_functions::PcmsrcRegisterT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::pcmsrc_register_t*)__0->NativePtr;
    NativePtr = new ::pcmsrc_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::PcmsrcRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PcmsrcRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::pcmsrc_register_t*)object.ToPointer();
}

reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_int^ reaper_plugin_functions::PcmsrcRegisterT::CreateFromType::get()
{
    return ((::pcmsrc_register_t*)NativePtr)->CreateFromType == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_int^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::pcmsrc_register_t*)NativePtr)->CreateFromType), reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_int::typeid));
}

void reaper_plugin_functions::PcmsrcRegisterT::CreateFromType::set(reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_int^ value)
{
    ((::pcmsrc_register_t*)NativePtr)->CreateFromType = static_cast<::PCM_source* (*)(void*, int)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_int^ reaper_plugin_functions::PcmsrcRegisterT::CreateFromFile::get()
{
    return ((::pcmsrc_register_t*)NativePtr)->CreateFromFile == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_int^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::pcmsrc_register_t*)NativePtr)->CreateFromFile), reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_int::typeid));
}

void reaper_plugin_functions::PcmsrcRegisterT::CreateFromFile::set(reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_int^ value)
{
    ((::pcmsrc_register_t*)NativePtr)->CreateFromFile = static_cast<::PCM_source* (*)(void*, int)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_int_sbytePtrPtr^ reaper_plugin_functions::PcmsrcRegisterT::EnumFileExtensions::get()
{
    return ((::pcmsrc_register_t*)NativePtr)->EnumFileExtensions == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_int_sbytePtrPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::pcmsrc_register_t*)NativePtr)->EnumFileExtensions), reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_int_sbytePtrPtr::typeid));
}

void reaper_plugin_functions::PcmsrcRegisterT::EnumFileExtensions::set(reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_int_sbytePtrPtr^ value)
{
    ((::pcmsrc_register_t*)NativePtr)->EnumFileExtensions = static_cast<void* (*)(int, void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::ISimpleMediaDecoder::ISimpleMediaDecoder(::ISimpleMediaDecoder* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::ISimpleMediaDecoder^ reaper_plugin_functions::ISimpleMediaDecoder::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::ISimpleMediaDecoder((::ISimpleMediaDecoder*) native.ToPointer());
}

reaper_plugin_functions::ISimpleMediaDecoder::ISimpleMediaDecoder(::ISimpleMediaDecoder* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::ISimpleMediaDecoder^ reaper_plugin_functions::ISimpleMediaDecoder::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::ISimpleMediaDecoder((::ISimpleMediaDecoder*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::ISimpleMediaDecoder::~ISimpleMediaDecoder()
{
    delete NativePtr;
}

void reaper_plugin_functions::ISimpleMediaDecoder::Open(System::String^ filename, int diskreadmode, int diskreadbs, int diskreadnb)
{
    auto ___arg0 = clix::marshalString<clix::E_UTF8>(filename);
    auto __arg0 = ___arg0.c_str();
    ((::ISimpleMediaDecoder*)NativePtr)->Open(__arg0, diskreadmode, diskreadbs, diskreadnb);
}

void reaper_plugin_functions::ISimpleMediaDecoder::Close(bool fullClose)
{
    ((::ISimpleMediaDecoder*)NativePtr)->Close(fullClose);
}

void reaper_plugin_functions::ISimpleMediaDecoder::GetInfoString(char* buf, int buflen, char* title, int titlelen)
{
    auto __arg0 = (char*)buf;
    auto __arg2 = (char*)title;
    ((::ISimpleMediaDecoder*)NativePtr)->GetInfoString(__arg0, buflen, __arg2, titlelen);
}

int reaper_plugin_functions::ISimpleMediaDecoder::ReadSamples([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] double% buf, int length)
{
    ReaSample __arg0 = (::ReaSample)buf;
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->ReadSamples(&__arg0, length);
    buf = __arg0;
    return __ret;
}

int reaper_plugin_functions::ISimpleMediaDecoder::Extended(int call, ::System::IntPtr parm1, ::System::IntPtr parm2, ::System::IntPtr parm3)
{
    auto __arg1 = (void*)parm1;
    auto __arg2 = (void*)parm2;
    auto __arg3 = (void*)parm3;
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->Extended(call, __arg1, __arg2, __arg3);
    return __ret;
}

reaper_plugin_functions::ISimpleMediaDecoder::ISimpleMediaDecoder()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::ISimpleMediaDecoder::ISimpleMediaDecoder(reaper_plugin_functions::ISimpleMediaDecoder^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::ISimpleMediaDecoder::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::ISimpleMediaDecoder::__Instance::set(System::IntPtr object)
{
    NativePtr = (::ISimpleMediaDecoder*)object.ToPointer();
}

reaper_plugin_functions::ISimpleMediaDecoder^ reaper_plugin_functions::ISimpleMediaDecoder::Duplicate::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->Duplicate();
    if (__ret == nullptr) return nullptr;
    return (__ret == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::ISimpleMediaDecoder((::ISimpleMediaDecoder*)__ret);
}

System::String^ reaper_plugin_functions::ISimpleMediaDecoder::FileName::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->GetFileName();
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

System::String^ reaper_plugin_functions::ISimpleMediaDecoder::Type::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->GetType();
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

bool reaper_plugin_functions::ISimpleMediaDecoder::IsOpen::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->IsOpen();
    return __ret;
}

int reaper_plugin_functions::ISimpleMediaDecoder::NumChannels::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->GetNumChannels();
    return __ret;
}

int reaper_plugin_functions::ISimpleMediaDecoder::BitsPerSample::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->GetBitsPerSample();
    return __ret;
}

double reaper_plugin_functions::ISimpleMediaDecoder::SampleRate::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->GetSampleRate();
    return __ret;
}

long long reaper_plugin_functions::ISimpleMediaDecoder::Length::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->GetLength();
    return __ret;
}

long long reaper_plugin_functions::ISimpleMediaDecoder::Position::get()
{
    auto __ret = ((::ISimpleMediaDecoder*)NativePtr)->GetPosition();
    return __ret;
}

void reaper_plugin_functions::ISimpleMediaDecoder::Position::set(long long pos)
{
    ((::ISimpleMediaDecoder*)NativePtr)->SetPosition(pos);
}

reaper_plugin_functions::MidiQuantizeModeT::MidiQuantizeModeT(::midi_quantize_mode_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::MidiQuantizeModeT^ reaper_plugin_functions::MidiQuantizeModeT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::MidiQuantizeModeT((::midi_quantize_mode_t*) native.ToPointer());
}

reaper_plugin_functions::MidiQuantizeModeT::MidiQuantizeModeT(::midi_quantize_mode_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::MidiQuantizeModeT^ reaper_plugin_functions::MidiQuantizeModeT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::MidiQuantizeModeT((::midi_quantize_mode_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::MidiQuantizeModeT::~MidiQuantizeModeT()
{
    delete NativePtr;
}

reaper_plugin_functions::MidiQuantizeModeT::MidiQuantizeModeT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::midi_quantize_mode_t();
}

reaper_plugin_functions::MidiQuantizeModeT::MidiQuantizeModeT(reaper_plugin_functions::MidiQuantizeModeT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::midi_quantize_mode_t*)__0->NativePtr;
    NativePtr = new ::midi_quantize_mode_t(__arg0);
}

System::IntPtr reaper_plugin_functions::MidiQuantizeModeT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::MidiQuantizeModeT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::midi_quantize_mode_t*)object.ToPointer();
}

bool reaper_plugin_functions::MidiQuantizeModeT::Doquant::get()
{
    return ((::midi_quantize_mode_t*)NativePtr)->doquant;
}

void reaper_plugin_functions::MidiQuantizeModeT::Doquant::set(bool value)
{
    ((::midi_quantize_mode_t*)NativePtr)->doquant = value;
}

char reaper_plugin_functions::MidiQuantizeModeT::Movemode::get()
{
    return ((::midi_quantize_mode_t*)NativePtr)->movemode;
}

void reaper_plugin_functions::MidiQuantizeModeT::Movemode::set(char value)
{
    ((::midi_quantize_mode_t*)NativePtr)->movemode = value;
}

char reaper_plugin_functions::MidiQuantizeModeT::Sizemode::get()
{
    return ((::midi_quantize_mode_t*)NativePtr)->sizemode;
}

void reaper_plugin_functions::MidiQuantizeModeT::Sizemode::set(char value)
{
    ((::midi_quantize_mode_t*)NativePtr)->sizemode = value;
}

char reaper_plugin_functions::MidiQuantizeModeT::Quantstrength::get()
{
    return ((::midi_quantize_mode_t*)NativePtr)->quantstrength;
}

void reaper_plugin_functions::MidiQuantizeModeT::Quantstrength::set(char value)
{
    ((::midi_quantize_mode_t*)NativePtr)->quantstrength = value;
}

double reaper_plugin_functions::MidiQuantizeModeT::Quantamt::get()
{
    return ((::midi_quantize_mode_t*)NativePtr)->quantamt;
}

void reaper_plugin_functions::MidiQuantizeModeT::Quantamt::set(double value)
{
    ((::midi_quantize_mode_t*)NativePtr)->quantamt = value;
}

char reaper_plugin_functions::MidiQuantizeModeT::Swingamt::get()
{
    return ((::midi_quantize_mode_t*)NativePtr)->swingamt;
}

void reaper_plugin_functions::MidiQuantizeModeT::Swingamt::set(char value)
{
    ((::midi_quantize_mode_t*)NativePtr)->swingamt = value;
}

char reaper_plugin_functions::MidiQuantizeModeT::RangeMin::get()
{
    return ((::midi_quantize_mode_t*)NativePtr)->range_min;
}

void reaper_plugin_functions::MidiQuantizeModeT::RangeMin::set(char value)
{
    ((::midi_quantize_mode_t*)NativePtr)->range_min = value;
}

char reaper_plugin_functions::MidiQuantizeModeT::RangeMax::get()
{
    return ((::midi_quantize_mode_t*)NativePtr)->range_max;
}

void reaper_plugin_functions::MidiQuantizeModeT::RangeMax::set(char value)
{
    ((::midi_quantize_mode_t*)NativePtr)->range_max = value;
}

reaper_plugin_functions::PCM_sink::PCM_sink(::PCM_sink* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PCM_sink^ reaper_plugin_functions::PCM_sink::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PCM_sink((::PCM_sink*) native.ToPointer());
}

reaper_plugin_functions::PCM_sink::PCM_sink(::PCM_sink* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PCM_sink^ reaper_plugin_functions::PCM_sink::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PCM_sink((::PCM_sink*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PCM_sink::~PCM_sink()
{
    delete NativePtr;
}

reaper_plugin_functions::PCM_sink::PCM_sink()
{
    __ownsNativeInstance = true;
}

void reaper_plugin_functions::PCM_sink::GetOutputInfoString(char* buf, int buflen)
{
    auto __arg0 = (char*)buf;
    ((::PCM_sink*)NativePtr)->GetOutputInfoString(__arg0, buflen);
}

void reaper_plugin_functions::PCM_sink::WriteMIDI(reaper_plugin_functions::MIDI_eventlist^ events, int len, double samplerate)
{
    auto __arg0 = (::MIDI_eventlist*)events->NativePtr;
    ((::PCM_sink*)NativePtr)->WriteMIDI(__arg0, len, samplerate);
}

void reaper_plugin_functions::PCM_sink::WriteDoubles(double** samples, int len, int nch, int offset, int spacing)
{
    auto __arg0 = (ReaSample**)samples;
    ((::PCM_sink*)NativePtr)->WriteDoubles(__arg0, len, nch, offset, spacing);
}

int reaper_plugin_functions::PCM_sink::GetLastSecondPeaks(int sz, [System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] double% buf)
{
    ReaSample __arg1 = (::ReaSample)buf;
    auto __ret = ((::PCM_sink*)NativePtr)->GetLastSecondPeaks(sz, &__arg1);
    buf = __arg1;
    return __ret;
}

void reaper_plugin_functions::PCM_sink::GetPeakInfo(reaper_plugin_functions::PCM_source_peaktransfer_t^ block)
{
    auto __arg0 = (::PCM_source_peaktransfer_t*)block->NativePtr;
    ((::PCM_sink*)NativePtr)->GetPeakInfo(__arg0);
}

int reaper_plugin_functions::PCM_sink::Extended(int call, ::System::IntPtr parm1, ::System::IntPtr parm2, ::System::IntPtr parm3)
{
    auto __arg1 = (void*)parm1;
    auto __arg2 = (void*)parm2;
    auto __arg3 = (void*)parm3;
    auto __ret = ((::PCM_sink*)NativePtr)->Extended(call, __arg1, __arg2, __arg3);
    return __ret;
}

reaper_plugin_functions::PCM_sink::PCM_sink(reaper_plugin_functions::PCM_sink^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::PCM_sink::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PCM_sink::__Instance::set(System::IntPtr object)
{
    NativePtr = (::PCM_sink*)object.ToPointer();
}

double reaper_plugin_functions::PCM_sink::StartTime::get()
{
    auto __ret = ((::PCM_sink*)NativePtr)->GetStartTime();
    return __ret;
}

void reaper_plugin_functions::PCM_sink::StartTime::set(double st)
{
    ((::PCM_sink*)NativePtr)->SetStartTime(st);
}

System::String^ reaper_plugin_functions::PCM_sink::FileName::get()
{
    auto __ret = ((::PCM_sink*)NativePtr)->GetFileName();
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

int reaper_plugin_functions::PCM_sink::NumChannels::get()
{
    auto __ret = ((::PCM_sink*)NativePtr)->GetNumChannels();
    return __ret;
}

double reaper_plugin_functions::PCM_sink::Length::get()
{
    auto __ret = ((::PCM_sink*)NativePtr)->GetLength();
    return __ret;
}

long long reaper_plugin_functions::PCM_sink::FileSize::get()
{
    auto __ret = ((::PCM_sink*)NativePtr)->GetFileSize();
    return __ret;
}

bool reaper_plugin_functions::PCM_sink::WantMIDI::get()
{
    auto __ret = ((::PCM_sink*)NativePtr)->WantMIDI();
    return __ret;
}

reaper_plugin_functions::PcmsinkRegisterT::PcmsinkRegisterT(::pcmsink_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PcmsinkRegisterT^ reaper_plugin_functions::PcmsinkRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PcmsinkRegisterT((::pcmsink_register_t*) native.ToPointer());
}

reaper_plugin_functions::PcmsinkRegisterT::PcmsinkRegisterT(::pcmsink_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PcmsinkRegisterT^ reaper_plugin_functions::PcmsinkRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PcmsinkRegisterT((::pcmsink_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PcmsinkRegisterT::~PcmsinkRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::PcmsinkRegisterT::PcmsinkRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::pcmsink_register_t();
}

reaper_plugin_functions::PcmsinkRegisterT::PcmsinkRegisterT(reaper_plugin_functions::PcmsinkRegisterT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::pcmsink_register_t*)__0->NativePtr;
    NativePtr = new ::pcmsink_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::PcmsinkRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PcmsinkRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::pcmsink_register_t*)object.ToPointer();
}

reaper_plugin_functions::PcmsinkRegisterT::Func_uint_sbytePtrPtr^ reaper_plugin_functions::PcmsinkRegisterT::GetFmt::get()
{
    return ((::pcmsink_register_t*)NativePtr)->GetFmt == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsinkRegisterT::Func_uint_sbytePtrPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::pcmsink_register_t*)NativePtr)->GetFmt), reaper_plugin_functions::PcmsinkRegisterT::Func_uint_sbytePtrPtr::typeid));
}

void reaper_plugin_functions::PcmsinkRegisterT::GetFmt::set(reaper_plugin_functions::PcmsinkRegisterT::Func_uint_sbytePtrPtr^ value)
{
    ((::pcmsink_register_t*)NativePtr)->GetFmt = static_cast<unsigned int (*)(void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr___IntPtr_int^ reaper_plugin_functions::PcmsinkRegisterT::GetExtension::get()
{
    return ((::pcmsink_register_t*)NativePtr)->GetExtension == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr___IntPtr_int^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::pcmsink_register_t*)NativePtr)->GetExtension), reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr___IntPtr_int::typeid));
}

void reaper_plugin_functions::PcmsinkRegisterT::GetExtension::set(reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr___IntPtr_int^ value)
{
    ((::pcmsink_register_t*)NativePtr)->GetExtension = static_cast<void* (*)(const void*, int)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr___IntPtr_int___IntPtr^ reaper_plugin_functions::PcmsinkRegisterT::ShowConfig::get()
{
    return ((::pcmsink_register_t*)NativePtr)->ShowConfig == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr___IntPtr_int___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::pcmsink_register_t*)NativePtr)->ShowConfig), reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr___IntPtr_int___IntPtr::typeid));
}

void reaper_plugin_functions::PcmsinkRegisterT::ShowConfig::set(reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr___IntPtr_int___IntPtr^ value)
{
    ((::pcmsink_register_t*)NativePtr)->ShowConfig = static_cast<HWND (*)(const void*, int, HWND)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_int_int_int_bool^ reaper_plugin_functions::PcmsinkRegisterT::CreateSink::get()
{
    return ((::pcmsink_register_t*)NativePtr)->CreateSink == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_int_int_int_bool^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::pcmsink_register_t*)NativePtr)->CreateSink), reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_int_int_int_bool::typeid));
}

void reaper_plugin_functions::PcmsinkRegisterT::CreateSink::set(reaper_plugin_functions::PcmsinkRegisterT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_int_int_int_bool^ value)
{
    ((::pcmsink_register_t*)NativePtr)->CreateSink = static_cast<::PCM_sink* (*)(void*, void*, int, int, int, bool)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::PcmsinkRegisterExtT::PcmsinkRegisterExtT(::pcmsink_register_ext_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PcmsinkRegisterExtT^ reaper_plugin_functions::PcmsinkRegisterExtT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PcmsinkRegisterExtT((::pcmsink_register_ext_t*) native.ToPointer());
}

reaper_plugin_functions::PcmsinkRegisterExtT::PcmsinkRegisterExtT(::pcmsink_register_ext_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PcmsinkRegisterExtT^ reaper_plugin_functions::PcmsinkRegisterExtT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PcmsinkRegisterExtT((::pcmsink_register_ext_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PcmsinkRegisterExtT::~PcmsinkRegisterExtT()
{
    delete NativePtr;
}

reaper_plugin_functions::PcmsinkRegisterExtT::PcmsinkRegisterExtT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::pcmsink_register_ext_t();
}

reaper_plugin_functions::PcmsinkRegisterExtT::PcmsinkRegisterExtT(reaper_plugin_functions::PcmsinkRegisterExtT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::pcmsink_register_ext_t*)__0->NativePtr;
    NativePtr = new ::pcmsink_register_ext_t(__arg0);
}

System::IntPtr reaper_plugin_functions::PcmsinkRegisterExtT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PcmsinkRegisterExtT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::pcmsink_register_ext_t*)object.ToPointer();
}

reaper_plugin_functions::PcmsinkRegisterT^ reaper_plugin_functions::PcmsinkRegisterExtT::Sink::get()
{
    return (&((::pcmsink_register_ext_t*)NativePtr)->sink == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::PcmsinkRegisterT((::pcmsink_register_t*)&((::pcmsink_register_ext_t*)NativePtr)->sink);
}

void reaper_plugin_functions::PcmsinkRegisterExtT::Sink::set(reaper_plugin_functions::PcmsinkRegisterT^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((::pcmsink_register_ext_t*)NativePtr)->sink = *(::pcmsink_register_t*)value->NativePtr;
}

reaper_plugin_functions::PcmsinkRegisterExtT::Func_int_int___IntPtr___IntPtr___IntPtr^ reaper_plugin_functions::PcmsinkRegisterExtT::Extended::get()
{
    return ((::pcmsink_register_ext_t*)NativePtr)->Extended == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsinkRegisterExtT::Func_int_int___IntPtr___IntPtr___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::pcmsink_register_ext_t*)NativePtr)->Extended), reaper_plugin_functions::PcmsinkRegisterExtT::Func_int_int___IntPtr___IntPtr___IntPtr::typeid));
}

void reaper_plugin_functions::PcmsinkRegisterExtT::Extended::set(reaper_plugin_functions::PcmsinkRegisterExtT::Func_int_int___IntPtr___IntPtr___IntPtr^ value)
{
    ((::pcmsink_register_ext_t*)NativePtr)->Extended = static_cast<int (*)(int, void*, void*, void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

cli::array<char>^ reaper_plugin_functions::PcmsinkRegisterExtT::Expand::get()
{
    cli::array<char>^ __array0 = nullptr;
    if (((::pcmsink_register_ext_t*)NativePtr)->expand != 0)
    {
        __array0 = gcnew cli::array<char>(256);
        for (int i = 0; i < 256; i++)
            __array0[i] = ((::pcmsink_register_ext_t*)NativePtr)->expand[i];
    }
    return __array0;
}

void reaper_plugin_functions::PcmsinkRegisterExtT::Expand::set(cli::array<char>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 256)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 256; i++)
            ((::pcmsink_register_ext_t*)NativePtr)->expand[i] = value[i];
    }
}

reaper_plugin_functions::REAPER_ResampleInterface::REAPER_ResampleInterface(::REAPER_Resample_Interface* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_ResampleInterface^ reaper_plugin_functions::REAPER_ResampleInterface::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::REAPER_ResampleInterface((::REAPER_Resample_Interface*) native.ToPointer());
}

reaper_plugin_functions::REAPER_ResampleInterface::REAPER_ResampleInterface(::REAPER_Resample_Interface* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_ResampleInterface^ reaper_plugin_functions::REAPER_ResampleInterface::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::REAPER_ResampleInterface((::REAPER_Resample_Interface*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::REAPER_ResampleInterface::~REAPER_ResampleInterface()
{
    delete NativePtr;
}

void reaper_plugin_functions::REAPER_ResampleInterface::SetRates(double rate_in, double rate_out)
{
    ((::REAPER_Resample_Interface*)NativePtr)->SetRates(rate_in, rate_out);
}

void reaper_plugin_functions::REAPER_ResampleInterface::Reset()
{
    ((::REAPER_Resample_Interface*)NativePtr)->Reset();
}

int reaper_plugin_functions::REAPER_ResampleInterface::ResamplePrepare(int out_samples, int nch, double** inbuffer)
{
    auto __arg2 = (ReaSample**)inbuffer;
    auto __ret = ((::REAPER_Resample_Interface*)NativePtr)->ResamplePrepare(out_samples, nch, __arg2);
    return __ret;
}

int reaper_plugin_functions::REAPER_ResampleInterface::ResampleOut([System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] double% out, int nsamples_in, int nsamples_out, int nch)
{
    ReaSample __arg0 = (::ReaSample)out;
    auto __ret = ((::REAPER_Resample_Interface*)NativePtr)->ResampleOut(&__arg0, nsamples_in, nsamples_out, nch);
    out = __arg0;
    return __ret;
}

int reaper_plugin_functions::REAPER_ResampleInterface::Extended(int call, ::System::IntPtr parm1, ::System::IntPtr parm2, ::System::IntPtr parm3)
{
    auto __arg1 = (void*)parm1;
    auto __arg2 = (void*)parm2;
    auto __arg3 = (void*)parm3;
    auto __ret = ((::REAPER_Resample_Interface*)NativePtr)->Extended(call, __arg1, __arg2, __arg3);
    return __ret;
}

reaper_plugin_functions::REAPER_ResampleInterface::REAPER_ResampleInterface()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::REAPER_ResampleInterface::REAPER_ResampleInterface(reaper_plugin_functions::REAPER_ResampleInterface^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::REAPER_ResampleInterface::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::REAPER_ResampleInterface::__Instance::set(System::IntPtr object)
{
    NativePtr = (::REAPER_Resample_Interface*)object.ToPointer();
}

double reaper_plugin_functions::REAPER_ResampleInterface::CurrentLatency::get()
{
    auto __ret = ((::REAPER_Resample_Interface*)NativePtr)->GetCurrentLatency();
    return __ret;
}

reaper_plugin_functions::IReaperPitchShift::IReaperPitchShift(::IReaperPitchShift* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::IReaperPitchShift^ reaper_plugin_functions::IReaperPitchShift::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::IReaperPitchShift((::IReaperPitchShift*) native.ToPointer());
}

reaper_plugin_functions::IReaperPitchShift::IReaperPitchShift(::IReaperPitchShift* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::IReaperPitchShift^ reaper_plugin_functions::IReaperPitchShift::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::IReaperPitchShift((::IReaperPitchShift*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::IReaperPitchShift::~IReaperPitchShift()
{
    delete NativePtr;
}

void reaper_plugin_functions::IReaperPitchShift::SetSrate(double srate)
{
    ((::IReaperPitchShift*)NativePtr)->set_srate(srate);
}

void reaper_plugin_functions::IReaperPitchShift::SetNch(int nch)
{
    ((::IReaperPitchShift*)NativePtr)->set_nch(nch);
}

void reaper_plugin_functions::IReaperPitchShift::SetShift(double shift)
{
    ((::IReaperPitchShift*)NativePtr)->set_shift(shift);
}

void reaper_plugin_functions::IReaperPitchShift::SetFormantShift(double shift)
{
    ((::IReaperPitchShift*)NativePtr)->set_formant_shift(shift);
}

void reaper_plugin_functions::IReaperPitchShift::SetTempo(double tempo)
{
    ((::IReaperPitchShift*)NativePtr)->set_tempo(tempo);
}

void reaper_plugin_functions::IReaperPitchShift::Reset()
{
    ((::IReaperPitchShift*)NativePtr)->Reset();
}

double* reaper_plugin_functions::IReaperPitchShift::GetBuffer(int size)
{
    auto __ret = ((::IReaperPitchShift*)NativePtr)->GetBuffer(size);
    return reinterpret_cast<double*>(__ret);
}

void reaper_plugin_functions::IReaperPitchShift::BufferDone(int input_filled)
{
    ((::IReaperPitchShift*)NativePtr)->BufferDone(input_filled);
}

void reaper_plugin_functions::IReaperPitchShift::FlushSamples()
{
    ((::IReaperPitchShift*)NativePtr)->FlushSamples();
}

int reaper_plugin_functions::IReaperPitchShift::GetSamples(int requested_output, [System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] double% buffer)
{
    ReaSample __arg1 = (::ReaSample)buffer;
    auto __ret = ((::IReaperPitchShift*)NativePtr)->GetSamples(requested_output, &__arg1);
    buffer = __arg1;
    return __ret;
}

void reaper_plugin_functions::IReaperPitchShift::SetQualityParameter(int parm)
{
    ((::IReaperPitchShift*)NativePtr)->SetQualityParameter(parm);
}

int reaper_plugin_functions::IReaperPitchShift::Extended(int call, ::System::IntPtr parm1, ::System::IntPtr parm2, ::System::IntPtr parm3)
{
    auto __arg1 = (void*)parm1;
    auto __arg2 = (void*)parm2;
    auto __arg3 = (void*)parm3;
    auto __ret = ((::IReaperPitchShift*)NativePtr)->Extended(call, __arg1, __arg2, __arg3);
    return __ret;
}

reaper_plugin_functions::IReaperPitchShift::IReaperPitchShift()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::IReaperPitchShift::IReaperPitchShift(reaper_plugin_functions::IReaperPitchShift^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::IReaperPitchShift::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::IReaperPitchShift::__Instance::set(System::IntPtr object)
{
    NativePtr = (::IReaperPitchShift*)object.ToPointer();
}

bool reaper_plugin_functions::IReaperPitchShift::IsReset::get()
{
    auto __ret = ((::IReaperPitchShift*)NativePtr)->IsReset();
    return __ret;
}

reaper_plugin_functions::REAPER_PeakGetInterface::REAPER_PeakGetInterface(::REAPER_PeakGet_Interface* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_PeakGetInterface^ reaper_plugin_functions::REAPER_PeakGetInterface::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::REAPER_PeakGetInterface((::REAPER_PeakGet_Interface*) native.ToPointer());
}

reaper_plugin_functions::REAPER_PeakGetInterface::REAPER_PeakGetInterface(::REAPER_PeakGet_Interface* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_PeakGetInterface^ reaper_plugin_functions::REAPER_PeakGetInterface::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::REAPER_PeakGetInterface((::REAPER_PeakGet_Interface*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::REAPER_PeakGetInterface::~REAPER_PeakGetInterface()
{
    delete NativePtr;
}

void reaper_plugin_functions::REAPER_PeakGetInterface::GetPeakInfo(reaper_plugin_functions::PCM_source_peaktransfer_t^ block)
{
    auto __arg0 = (::PCM_source_peaktransfer_t*)block->NativePtr;
    ((::REAPER_PeakGet_Interface*)NativePtr)->GetPeakInfo(__arg0);
}

int reaper_plugin_functions::REAPER_PeakGetInterface::Extended(int call, ::System::IntPtr parm1, ::System::IntPtr parm2, ::System::IntPtr parm3)
{
    auto __arg1 = (void*)parm1;
    auto __arg2 = (void*)parm2;
    auto __arg3 = (void*)parm3;
    auto __ret = ((::REAPER_PeakGet_Interface*)NativePtr)->Extended(call, __arg1, __arg2, __arg3);
    return __ret;
}

reaper_plugin_functions::REAPER_PeakGetInterface::REAPER_PeakGetInterface()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::REAPER_PeakGetInterface::REAPER_PeakGetInterface(reaper_plugin_functions::REAPER_PeakGetInterface^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::REAPER_PeakGetInterface::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::REAPER_PeakGetInterface::__Instance::set(System::IntPtr object)
{
    NativePtr = (::REAPER_PeakGet_Interface*)object.ToPointer();
}

double reaper_plugin_functions::REAPER_PeakGetInterface::MaxPeakRes::get()
{
    auto __ret = ((::REAPER_PeakGet_Interface*)NativePtr)->GetMaxPeakRes();
    return __ret;
}

reaper_plugin_functions::REAPER_PeakBuildInterface::REAPER_PeakBuildInterface(::REAPER_PeakBuild_Interface* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_PeakBuildInterface^ reaper_plugin_functions::REAPER_PeakBuildInterface::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::REAPER_PeakBuildInterface((::REAPER_PeakBuild_Interface*) native.ToPointer());
}

reaper_plugin_functions::REAPER_PeakBuildInterface::REAPER_PeakBuildInterface(::REAPER_PeakBuild_Interface* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::REAPER_PeakBuildInterface^ reaper_plugin_functions::REAPER_PeakBuildInterface::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::REAPER_PeakBuildInterface((::REAPER_PeakBuild_Interface*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::REAPER_PeakBuildInterface::~REAPER_PeakBuildInterface()
{
    delete NativePtr;
}

void reaper_plugin_functions::REAPER_PeakBuildInterface::ProcessSamples(double** samples, int len, int nch, int offs, int spread)
{
    auto __arg0 = (ReaSample**)samples;
    ((::REAPER_PeakBuild_Interface*)NativePtr)->ProcessSamples(__arg0, len, nch, offs, spread);
}

int reaper_plugin_functions::REAPER_PeakBuildInterface::Run()
{
    auto __ret = ((::REAPER_PeakBuild_Interface*)NativePtr)->Run();
    return __ret;
}

int reaper_plugin_functions::REAPER_PeakBuildInterface::GetLastSecondPeaks(int sz, [System::Runtime::InteropServices::In, System::Runtime::InteropServices::Out] double% buf)
{
    ReaSample __arg1 = (::ReaSample)buf;
    auto __ret = ((::REAPER_PeakBuild_Interface*)NativePtr)->GetLastSecondPeaks(sz, &__arg1);
    buf = __arg1;
    return __ret;
}

void reaper_plugin_functions::REAPER_PeakBuildInterface::GetPeakInfo(reaper_plugin_functions::PCM_source_peaktransfer_t^ block)
{
    auto __arg0 = (::PCM_source_peaktransfer_t*)block->NativePtr;
    ((::REAPER_PeakBuild_Interface*)NativePtr)->GetPeakInfo(__arg0);
}

int reaper_plugin_functions::REAPER_PeakBuildInterface::Extended(int call, ::System::IntPtr parm1, ::System::IntPtr parm2, ::System::IntPtr parm3)
{
    auto __arg1 = (void*)parm1;
    auto __arg2 = (void*)parm2;
    auto __arg3 = (void*)parm3;
    auto __ret = ((::REAPER_PeakBuild_Interface*)NativePtr)->Extended(call, __arg1, __arg2, __arg3);
    return __ret;
}

reaper_plugin_functions::REAPER_PeakBuildInterface::REAPER_PeakBuildInterface()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::REAPER_PeakBuildInterface::REAPER_PeakBuildInterface(reaper_plugin_functions::REAPER_PeakBuildInterface^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::REAPER_PeakBuildInterface::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::REAPER_PeakBuildInterface::__Instance::set(System::IntPtr object)
{
    NativePtr = (::REAPER_PeakBuild_Interface*)object.ToPointer();
}
reaper_plugin_functions::AcceleratorRegisterT::AcceleratorRegisterT(::accelerator_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::AcceleratorRegisterT^ reaper_plugin_functions::AcceleratorRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::AcceleratorRegisterT((::accelerator_register_t*) native.ToPointer());
}

reaper_plugin_functions::AcceleratorRegisterT::AcceleratorRegisterT(::accelerator_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::AcceleratorRegisterT^ reaper_plugin_functions::AcceleratorRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::AcceleratorRegisterT((::accelerator_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::AcceleratorRegisterT::~AcceleratorRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::AcceleratorRegisterT::AcceleratorRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::accelerator_register_t();
}

reaper_plugin_functions::AcceleratorRegisterT::AcceleratorRegisterT(reaper_plugin_functions::AcceleratorRegisterT^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::accelerator_register_t*)_0->NativePtr;
    NativePtr = new ::accelerator_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::AcceleratorRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::AcceleratorRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::accelerator_register_t*)object.ToPointer();
}

reaper_plugin_functions::PCM_source::Func_int___IntPtr___IntPtr^ reaper_plugin_functions::AcceleratorRegisterT::TranslateAccel::get()
{
    return ((::accelerator_register_t*)NativePtr)->translateAccel == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PCM_source::Func_int___IntPtr___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::accelerator_register_t*)NativePtr)->translateAccel), reaper_plugin_functions::PCM_source::Func_int___IntPtr___IntPtr::typeid));
}

void reaper_plugin_functions::AcceleratorRegisterT::TranslateAccel::set(reaper_plugin_functions::PCM_source::Func_int___IntPtr___IntPtr^ value)
{
    ((::accelerator_register_t*)NativePtr)->translateAccel = static_cast<int (*)(void*, HWND)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

bool reaper_plugin_functions::AcceleratorRegisterT::IsLocal::get()
{
    return ((::accelerator_register_t*)NativePtr)->isLocal;
}

void reaper_plugin_functions::AcceleratorRegisterT::IsLocal::set(bool value)
{
    ((::accelerator_register_t*)NativePtr)->isLocal = value;
}

::System::IntPtr reaper_plugin_functions::AcceleratorRegisterT::User::get()
{
    return ::System::IntPtr(((::accelerator_register_t*)NativePtr)->user);
}

void reaper_plugin_functions::AcceleratorRegisterT::User::set(::System::IntPtr value)
{
    ((::accelerator_register_t*)NativePtr)->user = (void*)value;
}

reaper_plugin_functions::CustomActionRegisterT::CustomActionRegisterT(::custom_action_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::CustomActionRegisterT^ reaper_plugin_functions::CustomActionRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::CustomActionRegisterT((::custom_action_register_t*) native.ToPointer());
}

reaper_plugin_functions::CustomActionRegisterT::CustomActionRegisterT(::custom_action_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::CustomActionRegisterT^ reaper_plugin_functions::CustomActionRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::CustomActionRegisterT((::custom_action_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::CustomActionRegisterT::~CustomActionRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::CustomActionRegisterT::CustomActionRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::custom_action_register_t();
}

reaper_plugin_functions::CustomActionRegisterT::CustomActionRegisterT(reaper_plugin_functions::CustomActionRegisterT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::custom_action_register_t*)__0->NativePtr;
    NativePtr = new ::custom_action_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::CustomActionRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::CustomActionRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::custom_action_register_t*)object.ToPointer();
}

int reaper_plugin_functions::CustomActionRegisterT::UniqueSectionId::get()
{
    return ((::custom_action_register_t*)NativePtr)->uniqueSectionId;
}

void reaper_plugin_functions::CustomActionRegisterT::UniqueSectionId::set(int value)
{
    ((::custom_action_register_t*)NativePtr)->uniqueSectionId = value;
}

System::String^ reaper_plugin_functions::CustomActionRegisterT::IdStr::get()
{
    return (((::custom_action_register_t*)NativePtr)->idStr == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::custom_action_register_t*)NativePtr)->idStr));
}

void reaper_plugin_functions::CustomActionRegisterT::IdStr::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::custom_action_register_t*)NativePtr)->idStr = _value.c_str();
}

System::String^ reaper_plugin_functions::CustomActionRegisterT::Name::get()
{
    return (((::custom_action_register_t*)NativePtr)->name == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::custom_action_register_t*)NativePtr)->name));
}

void reaper_plugin_functions::CustomActionRegisterT::Name::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::custom_action_register_t*)NativePtr)->name = _value.c_str();
}

::System::IntPtr reaper_plugin_functions::CustomActionRegisterT::Extra::get()
{
    return ::System::IntPtr(((::custom_action_register_t*)NativePtr)->extra);
}

void reaper_plugin_functions::CustomActionRegisterT::Extra::set(::System::IntPtr value)
{
    ((::custom_action_register_t*)NativePtr)->extra = (void*)value;
}

reaper_plugin_functions::GaccelRegisterT::GaccelRegisterT(::gaccel_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::GaccelRegisterT^ reaper_plugin_functions::GaccelRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::GaccelRegisterT((::gaccel_register_t*) native.ToPointer());
}

reaper_plugin_functions::GaccelRegisterT::GaccelRegisterT(::gaccel_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::GaccelRegisterT^ reaper_plugin_functions::GaccelRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::GaccelRegisterT((::gaccel_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::GaccelRegisterT::~GaccelRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::GaccelRegisterT::GaccelRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::gaccel_register_t();
}

reaper_plugin_functions::GaccelRegisterT::GaccelRegisterT(reaper_plugin_functions::GaccelRegisterT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::gaccel_register_t*)__0->NativePtr;
    NativePtr = new ::gaccel_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::GaccelRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::GaccelRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::gaccel_register_t*)object.ToPointer();
}

TagACCEL^ reaper_plugin_functions::GaccelRegisterT::Accel::get()
{
    return (&((::gaccel_register_t*)NativePtr)->accel == nullptr) ? nullptr : gcnew ::TagACCEL((::tagACCEL*)&((::gaccel_register_t*)NativePtr)->accel);
}

void reaper_plugin_functions::GaccelRegisterT::Accel::set(TagACCEL^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((::gaccel_register_t*)NativePtr)->accel = *(::tagACCEL*)value->NativePtr;
}

System::String^ reaper_plugin_functions::GaccelRegisterT::Desc::get()
{
    return (((::gaccel_register_t*)NativePtr)->desc == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::gaccel_register_t*)NativePtr)->desc));
}

void reaper_plugin_functions::GaccelRegisterT::Desc::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::gaccel_register_t*)NativePtr)->desc = _value.c_str();
}

reaper_plugin_functions::ActionHelpT::ActionHelpT(::action_help_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::ActionHelpT^ reaper_plugin_functions::ActionHelpT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::ActionHelpT((::action_help_t*) native.ToPointer());
}

reaper_plugin_functions::ActionHelpT::ActionHelpT(::action_help_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::ActionHelpT^ reaper_plugin_functions::ActionHelpT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::ActionHelpT((::action_help_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::ActionHelpT::~ActionHelpT()
{
    delete NativePtr;
}

reaper_plugin_functions::ActionHelpT::ActionHelpT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::action_help_t();
}

reaper_plugin_functions::ActionHelpT::ActionHelpT(reaper_plugin_functions::ActionHelpT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::action_help_t*)__0->NativePtr;
    NativePtr = new ::action_help_t(__arg0);
}

System::IntPtr reaper_plugin_functions::ActionHelpT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::ActionHelpT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::action_help_t*)object.ToPointer();
}

System::String^ reaper_plugin_functions::ActionHelpT::ActionDesc::get()
{
    return (((::action_help_t*)NativePtr)->action_desc == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::action_help_t*)NativePtr)->action_desc));
}

void reaper_plugin_functions::ActionHelpT::ActionDesc::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::action_help_t*)NativePtr)->action_desc = _value.c_str();
}

System::String^ reaper_plugin_functions::ActionHelpT::ActionHelp::get()
{
    return (((::action_help_t*)NativePtr)->action_help == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::action_help_t*)NativePtr)->action_help));
}

void reaper_plugin_functions::ActionHelpT::ActionHelp::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::action_help_t*)NativePtr)->action_help = _value.c_str();
}

reaper_plugin_functions::EditorRegisterT::EditorRegisterT(::editor_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::EditorRegisterT^ reaper_plugin_functions::EditorRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::EditorRegisterT((::editor_register_t*) native.ToPointer());
}

reaper_plugin_functions::EditorRegisterT::EditorRegisterT(::editor_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::EditorRegisterT^ reaper_plugin_functions::EditorRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::EditorRegisterT((::editor_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::EditorRegisterT::~EditorRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::EditorRegisterT::EditorRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::editor_register_t();
}

reaper_plugin_functions::EditorRegisterT::EditorRegisterT(reaper_plugin_functions::EditorRegisterT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::editor_register_t*)__0->NativePtr;
    NativePtr = new ::editor_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::EditorRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::EditorRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::editor_register_t*)object.ToPointer();
}

reaper_plugin_functions::EditorRegisterT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_int^ reaper_plugin_functions::EditorRegisterT::EditFile::get()
{
    return ((::editor_register_t*)NativePtr)->editFile == nullptr ? nullptr : safe_cast<reaper_plugin_functions::EditorRegisterT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_int^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::editor_register_t*)NativePtr)->editFile), reaper_plugin_functions::EditorRegisterT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_int::typeid));
}

void reaper_plugin_functions::EditorRegisterT::EditFile::set(reaper_plugin_functions::EditorRegisterT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_int^ value)
{
    ((::editor_register_t*)NativePtr)->editFile = static_cast<int (*)(void*, HWND, int)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

::reaper_plugin_functions::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^ reaper_plugin_functions::EditorRegisterT::WouldHandle::get()
{
    return ((::editor_register_t*)NativePtr)->wouldHandle == nullptr ? nullptr : safe_cast<::reaper_plugin_functions::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::editor_register_t*)NativePtr)->wouldHandle), ::reaper_plugin_functions::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string::typeid));
}

void reaper_plugin_functions::EditorRegisterT::WouldHandle::set(::reaper_plugin_functions::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^ value)
{
    ((::editor_register_t*)NativePtr)->wouldHandle = static_cast<void* (*)(void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::ProjectImportRegisterT::ProjectImportRegisterT(::project_import_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::ProjectImportRegisterT^ reaper_plugin_functions::ProjectImportRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::ProjectImportRegisterT((::project_import_register_t*) native.ToPointer());
}

reaper_plugin_functions::ProjectImportRegisterT::ProjectImportRegisterT(::project_import_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::ProjectImportRegisterT^ reaper_plugin_functions::ProjectImportRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::ProjectImportRegisterT((::project_import_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::ProjectImportRegisterT::~ProjectImportRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::ProjectImportRegisterT::ProjectImportRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::project_import_register_t();
}

reaper_plugin_functions::ProjectImportRegisterT::ProjectImportRegisterT(reaper_plugin_functions::ProjectImportRegisterT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::project_import_register_t*)__0->NativePtr;
    NativePtr = new ::project_import_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::ProjectImportRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::ProjectImportRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::project_import_register_t*)object.ToPointer();
}

reaper_plugin_functions::ProjectImportRegisterT::Func_bool_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^ reaper_plugin_functions::ProjectImportRegisterT::WantProjectFile::get()
{
    return ((::project_import_register_t*)NativePtr)->WantProjectFile == nullptr ? nullptr : safe_cast<reaper_plugin_functions::ProjectImportRegisterT::Func_bool_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::project_import_register_t*)NativePtr)->WantProjectFile), reaper_plugin_functions::ProjectImportRegisterT::Func_bool_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string::typeid));
}

void reaper_plugin_functions::ProjectImportRegisterT::WantProjectFile::set(reaper_plugin_functions::ProjectImportRegisterT::Func_bool_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^ value)
{
    ((::project_import_register_t*)NativePtr)->WantProjectFile = static_cast<bool (*)(void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_int_sbytePtrPtr^ reaper_plugin_functions::ProjectImportRegisterT::EnumFileExtensions::get()
{
    return ((::project_import_register_t*)NativePtr)->EnumFileExtensions == nullptr ? nullptr : safe_cast<reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_int_sbytePtrPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::project_import_register_t*)NativePtr)->EnumFileExtensions), reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_int_sbytePtrPtr::typeid));
}

void reaper_plugin_functions::ProjectImportRegisterT::EnumFileExtensions::set(reaper_plugin_functions::PcmsrcRegisterT::Func___IntPtr_int_sbytePtrPtr^ value)
{
    ((::project_import_register_t*)NativePtr)->EnumFileExtensions = static_cast<void* (*)(int, void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::ReaperPluginInfoT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr^ reaper_plugin_functions::ProjectImportRegisterT::LoadProject::get()
{
    return ((::project_import_register_t*)NativePtr)->LoadProject == nullptr ? nullptr : safe_cast<reaper_plugin_functions::ReaperPluginInfoT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::project_import_register_t*)NativePtr)->LoadProject), reaper_plugin_functions::ReaperPluginInfoT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr::typeid));
}

void reaper_plugin_functions::ProjectImportRegisterT::LoadProject::set(reaper_plugin_functions::ReaperPluginInfoT::Func_int_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr^ value)
{
    ((::project_import_register_t*)NativePtr)->LoadProject = static_cast<int (*)(void*, void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::ProjectConfigExtensionT::ProjectConfigExtensionT(::project_config_extension_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::ProjectConfigExtensionT^ reaper_plugin_functions::ProjectConfigExtensionT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::ProjectConfigExtensionT((::project_config_extension_t*) native.ToPointer());
}

reaper_plugin_functions::ProjectConfigExtensionT::ProjectConfigExtensionT(::project_config_extension_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::ProjectConfigExtensionT^ reaper_plugin_functions::ProjectConfigExtensionT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::ProjectConfigExtensionT((::project_config_extension_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::ProjectConfigExtensionT::~ProjectConfigExtensionT()
{
    delete NativePtr;
}

reaper_plugin_functions::ProjectConfigExtensionT::ProjectConfigExtensionT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::project_config_extension_t();
}

reaper_plugin_functions::ProjectConfigExtensionT::ProjectConfigExtensionT(reaper_plugin_functions::ProjectConfigExtensionT^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::project_config_extension_t*)_0->NativePtr;
    NativePtr = new ::project_config_extension_t(__arg0);
}

System::IntPtr reaper_plugin_functions::ProjectConfigExtensionT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::ProjectConfigExtensionT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::project_config_extension_t*)object.ToPointer();
}

reaper_plugin_functions::ProjectConfigExtensionT::Func_bool_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_bool___IntPtr^ reaper_plugin_functions::ProjectConfigExtensionT::ProcessExtensionLine::get()
{
    return ((::project_config_extension_t*)NativePtr)->ProcessExtensionLine == nullptr ? nullptr : safe_cast<reaper_plugin_functions::ProjectConfigExtensionT::Func_bool_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_bool___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::project_config_extension_t*)NativePtr)->ProcessExtensionLine), reaper_plugin_functions::ProjectConfigExtensionT::Func_bool_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_bool___IntPtr::typeid));
}

void reaper_plugin_functions::ProjectConfigExtensionT::ProcessExtensionLine::set(reaper_plugin_functions::ProjectConfigExtensionT::Func_bool_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_bool___IntPtr^ value)
{
    ((::project_config_extension_t*)NativePtr)->ProcessExtensionLine = static_cast<bool (*)(void*, ::ProjectStateContext*, bool, ::project_config_extension_t*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::ProjectConfigExtensionT::Action___IntPtr_bool___IntPtr^ reaper_plugin_functions::ProjectConfigExtensionT::SaveExtensionConfig::get()
{
    return ((::project_config_extension_t*)NativePtr)->SaveExtensionConfig == nullptr ? nullptr : safe_cast<reaper_plugin_functions::ProjectConfigExtensionT::Action___IntPtr_bool___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::project_config_extension_t*)NativePtr)->SaveExtensionConfig), reaper_plugin_functions::ProjectConfigExtensionT::Action___IntPtr_bool___IntPtr::typeid));
}

void reaper_plugin_functions::ProjectConfigExtensionT::SaveExtensionConfig::set(reaper_plugin_functions::ProjectConfigExtensionT::Action___IntPtr_bool___IntPtr^ value)
{
    ((::project_config_extension_t*)NativePtr)->SaveExtensionConfig = static_cast<void (*)(::ProjectStateContext*, bool, ::project_config_extension_t*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::ProjectConfigExtensionT::Action_bool___IntPtr^ reaper_plugin_functions::ProjectConfigExtensionT::BeginLoadProjectState::get()
{
    return ((::project_config_extension_t*)NativePtr)->BeginLoadProjectState == nullptr ? nullptr : safe_cast<reaper_plugin_functions::ProjectConfigExtensionT::Action_bool___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::project_config_extension_t*)NativePtr)->BeginLoadProjectState), reaper_plugin_functions::ProjectConfigExtensionT::Action_bool___IntPtr::typeid));
}

void reaper_plugin_functions::ProjectConfigExtensionT::BeginLoadProjectState::set(reaper_plugin_functions::ProjectConfigExtensionT::Action_bool___IntPtr^ value)
{
    ((::project_config_extension_t*)NativePtr)->BeginLoadProjectState = static_cast<void (*)(bool, ::project_config_extension_t*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

::System::IntPtr reaper_plugin_functions::ProjectConfigExtensionT::UserData::get()
{
    return ::System::IntPtr(((::project_config_extension_t*)NativePtr)->userData);
}

void reaper_plugin_functions::ProjectConfigExtensionT::UserData::set(::System::IntPtr value)
{
    ((::project_config_extension_t*)NativePtr)->userData = (void*)value;
}

reaper_plugin_functions::PrefsPageRegisterT::PrefsPageRegisterT(::prefs_page_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PrefsPageRegisterT^ reaper_plugin_functions::PrefsPageRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PrefsPageRegisterT((::prefs_page_register_t*) native.ToPointer());
}

reaper_plugin_functions::PrefsPageRegisterT::PrefsPageRegisterT(::prefs_page_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PrefsPageRegisterT^ reaper_plugin_functions::PrefsPageRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PrefsPageRegisterT((::prefs_page_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PrefsPageRegisterT::~PrefsPageRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::PrefsPageRegisterT::PrefsPageRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::prefs_page_register_t();
}

reaper_plugin_functions::PrefsPageRegisterT::PrefsPageRegisterT(reaper_plugin_functions::PrefsPageRegisterT^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::prefs_page_register_t*)_0->NativePtr;
    NativePtr = new ::prefs_page_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::PrefsPageRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PrefsPageRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::prefs_page_register_t*)object.ToPointer();
}

System::String^ reaper_plugin_functions::PrefsPageRegisterT::Idstr::get()
{
    return (((::prefs_page_register_t*)NativePtr)->idstr == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::prefs_page_register_t*)NativePtr)->idstr));
}

void reaper_plugin_functions::PrefsPageRegisterT::Idstr::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::prefs_page_register_t*)NativePtr)->idstr = _value.c_str();
}

System::String^ reaper_plugin_functions::PrefsPageRegisterT::Displayname::get()
{
    return (((::prefs_page_register_t*)NativePtr)->displayname == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::prefs_page_register_t*)NativePtr)->displayname));
}

void reaper_plugin_functions::PrefsPageRegisterT::Displayname::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::prefs_page_register_t*)NativePtr)->displayname = _value.c_str();
}

reaper_plugin_functions::MidiInput::Func___IntPtr___IntPtr^ reaper_plugin_functions::PrefsPageRegisterT::Create::get()
{
    return ((::prefs_page_register_t*)NativePtr)->create == nullptr ? nullptr : safe_cast<reaper_plugin_functions::MidiInput::Func___IntPtr___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::prefs_page_register_t*)NativePtr)->create), reaper_plugin_functions::MidiInput::Func___IntPtr___IntPtr::typeid));
}

void reaper_plugin_functions::PrefsPageRegisterT::Create::set(reaper_plugin_functions::MidiInput::Func___IntPtr___IntPtr^ value)
{
    ((::prefs_page_register_t*)NativePtr)->create = static_cast<::MIDI_eventlist* (*)(void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

int reaper_plugin_functions::PrefsPageRegisterT::ParId::get()
{
    return ((::prefs_page_register_t*)NativePtr)->par_id;
}

void reaper_plugin_functions::PrefsPageRegisterT::ParId::set(int value)
{
    ((::prefs_page_register_t*)NativePtr)->par_id = value;
}

System::String^ reaper_plugin_functions::PrefsPageRegisterT::ParIdstr::get()
{
    return (((::prefs_page_register_t*)NativePtr)->par_idstr == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::prefs_page_register_t*)NativePtr)->par_idstr));
}

void reaper_plugin_functions::PrefsPageRegisterT::ParIdstr::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::prefs_page_register_t*)NativePtr)->par_idstr = _value.c_str();
}

int reaper_plugin_functions::PrefsPageRegisterT::ChildrenFlag::get()
{
    return ((::prefs_page_register_t*)NativePtr)->childrenFlag;
}

void reaper_plugin_functions::PrefsPageRegisterT::ChildrenFlag::set(int value)
{
    ((::prefs_page_register_t*)NativePtr)->childrenFlag = value;
}

::System::IntPtr reaper_plugin_functions::PrefsPageRegisterT::Treeitem::get()
{
    return ::System::IntPtr(((::prefs_page_register_t*)NativePtr)->treeitem);
}

void reaper_plugin_functions::PrefsPageRegisterT::Treeitem::set(::System::IntPtr value)
{
    ((::prefs_page_register_t*)NativePtr)->treeitem = (void*)value;
}

HWND_^ reaper_plugin_functions::PrefsPageRegisterT::HwndCache::get()
{
    return (((::prefs_page_register_t*)NativePtr)->hwndCache == nullptr) ? nullptr : gcnew ::HWND_((::HWND__*)((::prefs_page_register_t*)NativePtr)->hwndCache);
}

void reaper_plugin_functions::PrefsPageRegisterT::HwndCache::set(HWND_^ value)
{
    ((::prefs_page_register_t*)NativePtr)->hwndCache = (::HWND__*)value->NativePtr;
}

cli::array<char>^ reaper_plugin_functions::PrefsPageRegisterT::Extra::get()
{
    cli::array<char>^ __array0 = nullptr;
    if (((::prefs_page_register_t*)NativePtr)->_extra != 0)
    {
        __array0 = gcnew cli::array<char>(64);
        for (int i = 0; i < 64; i++)
            __array0[i] = ((::prefs_page_register_t*)NativePtr)->_extra[i];
    }
    return __array0;
}

void reaper_plugin_functions::PrefsPageRegisterT::Extra::set(cli::array<char>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 64)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 64; i++)
            ((::prefs_page_register_t*)NativePtr)->_extra[i] = value[i];
    }
}

reaper_plugin_functions::AudioHookRegisterT::AudioHookRegisterT(::audio_hook_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::AudioHookRegisterT^ reaper_plugin_functions::AudioHookRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::AudioHookRegisterT((::audio_hook_register_t*) native.ToPointer());
}

reaper_plugin_functions::AudioHookRegisterT::AudioHookRegisterT(::audio_hook_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::AudioHookRegisterT^ reaper_plugin_functions::AudioHookRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::AudioHookRegisterT((::audio_hook_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::AudioHookRegisterT::~AudioHookRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::AudioHookRegisterT::AudioHookRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::audio_hook_register_t();
}

reaper_plugin_functions::AudioHookRegisterT::AudioHookRegisterT(reaper_plugin_functions::AudioHookRegisterT^ _0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(_0, nullptr))
        throw gcnew ::System::ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::audio_hook_register_t*)_0->NativePtr;
    NativePtr = new ::audio_hook_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::AudioHookRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::AudioHookRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::audio_hook_register_t*)object.ToPointer();
}

reaper_plugin_functions::AudioHookRegisterT::Action_bool_int_double___IntPtr^ reaper_plugin_functions::AudioHookRegisterT::OnAudioBuffer::get()
{
    return ((::audio_hook_register_t*)NativePtr)->OnAudioBuffer == nullptr ? nullptr : safe_cast<reaper_plugin_functions::AudioHookRegisterT::Action_bool_int_double___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::audio_hook_register_t*)NativePtr)->OnAudioBuffer), reaper_plugin_functions::AudioHookRegisterT::Action_bool_int_double___IntPtr::typeid));
}

void reaper_plugin_functions::AudioHookRegisterT::OnAudioBuffer::set(reaper_plugin_functions::AudioHookRegisterT::Action_bool_int_double___IntPtr^ value)
{
    ((::audio_hook_register_t*)NativePtr)->OnAudioBuffer = static_cast<void (*)(bool, int, double, ::audio_hook_register_t*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

::System::IntPtr reaper_plugin_functions::AudioHookRegisterT::Userdata1::get()
{
    return ::System::IntPtr(((::audio_hook_register_t*)NativePtr)->userdata1);
}

void reaper_plugin_functions::AudioHookRegisterT::Userdata1::set(::System::IntPtr value)
{
    ((::audio_hook_register_t*)NativePtr)->userdata1 = (void*)value;
}

::System::IntPtr reaper_plugin_functions::AudioHookRegisterT::Userdata2::get()
{
    return ::System::IntPtr(((::audio_hook_register_t*)NativePtr)->userdata2);
}

void reaper_plugin_functions::AudioHookRegisterT::Userdata2::set(::System::IntPtr value)
{
    ((::audio_hook_register_t*)NativePtr)->userdata2 = (void*)value;
}

int reaper_plugin_functions::AudioHookRegisterT::InputNch::get()
{
    return ((::audio_hook_register_t*)NativePtr)->input_nch;
}

void reaper_plugin_functions::AudioHookRegisterT::InputNch::set(int value)
{
    ((::audio_hook_register_t*)NativePtr)->input_nch = value;
}

int reaper_plugin_functions::AudioHookRegisterT::OutputNch::get()
{
    return ((::audio_hook_register_t*)NativePtr)->output_nch;
}

void reaper_plugin_functions::AudioHookRegisterT::OutputNch::set(int value)
{
    ((::audio_hook_register_t*)NativePtr)->output_nch = value;
}

reaper_plugin_functions::AudioHookRegisterT::Func_doublePtr_bool_int^ reaper_plugin_functions::AudioHookRegisterT::GetBuffer::get()
{
    return ((::audio_hook_register_t*)NativePtr)->GetBuffer == nullptr ? nullptr : safe_cast<reaper_plugin_functions::AudioHookRegisterT::Func_doublePtr_bool_int^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::audio_hook_register_t*)NativePtr)->GetBuffer), reaper_plugin_functions::AudioHookRegisterT::Func_doublePtr_bool_int::typeid));
}

void reaper_plugin_functions::AudioHookRegisterT::GetBuffer::set(reaper_plugin_functions::AudioHookRegisterT::Func_doublePtr_bool_int^ value)
{
    ((::audio_hook_register_t*)NativePtr)->GetBuffer = static_cast<ReaSample* (*)(bool, int)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::KbdCmd::KbdCmd(::KbdCmd* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::KbdCmd^ reaper_plugin_functions::KbdCmd::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::KbdCmd((::KbdCmd*) native.ToPointer());
}

reaper_plugin_functions::KbdCmd::KbdCmd(::KbdCmd* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::KbdCmd^ reaper_plugin_functions::KbdCmd::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::KbdCmd((::KbdCmd*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::KbdCmd::~KbdCmd()
{
    delete NativePtr;
}

reaper_plugin_functions::KbdCmd::KbdCmd()
{
    __ownsNativeInstance = true;
    NativePtr = new ::KbdCmd();
}

reaper_plugin_functions::KbdCmd::KbdCmd(reaper_plugin_functions::KbdCmd^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::KbdCmd*)__0->NativePtr;
    NativePtr = new ::KbdCmd(__arg0);
}

System::IntPtr reaper_plugin_functions::KbdCmd::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::KbdCmd::__Instance::set(System::IntPtr object)
{
    NativePtr = (::KbdCmd*)object.ToPointer();
}

unsigned long reaper_plugin_functions::KbdCmd::Cmd::get()
{
    return ((::KbdCmd*)NativePtr)->cmd;
}

void reaper_plugin_functions::KbdCmd::Cmd::set(unsigned long value)
{
    ((::KbdCmd*)NativePtr)->cmd = (::DWORD)value;
}

System::String^ reaper_plugin_functions::KbdCmd::Text::get()
{
    return (((::KbdCmd*)NativePtr)->text == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::KbdCmd*)NativePtr)->text));
}

void reaper_plugin_functions::KbdCmd::Text::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::KbdCmd*)NativePtr)->text = _value.c_str();
}

reaper_plugin_functions::KbdKeyBindingInfo::KbdKeyBindingInfo(::KbdKeyBindingInfo* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::KbdKeyBindingInfo^ reaper_plugin_functions::KbdKeyBindingInfo::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::KbdKeyBindingInfo((::KbdKeyBindingInfo*) native.ToPointer());
}

reaper_plugin_functions::KbdKeyBindingInfo::KbdKeyBindingInfo(::KbdKeyBindingInfo* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::KbdKeyBindingInfo^ reaper_plugin_functions::KbdKeyBindingInfo::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::KbdKeyBindingInfo((::KbdKeyBindingInfo*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::KbdKeyBindingInfo::~KbdKeyBindingInfo()
{
    delete NativePtr;
}

reaper_plugin_functions::KbdKeyBindingInfo::KbdKeyBindingInfo()
{
    __ownsNativeInstance = true;
    NativePtr = new ::KbdKeyBindingInfo();
}

reaper_plugin_functions::KbdKeyBindingInfo::KbdKeyBindingInfo(reaper_plugin_functions::KbdKeyBindingInfo^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::KbdKeyBindingInfo*)__0->NativePtr;
    NativePtr = new ::KbdKeyBindingInfo(__arg0);
}

System::IntPtr reaper_plugin_functions::KbdKeyBindingInfo::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::KbdKeyBindingInfo::__Instance::set(System::IntPtr object)
{
    NativePtr = (::KbdKeyBindingInfo*)object.ToPointer();
}

int reaper_plugin_functions::KbdKeyBindingInfo::Key::get()
{
    return ((::KbdKeyBindingInfo*)NativePtr)->key;
}

void reaper_plugin_functions::KbdKeyBindingInfo::Key::set(int value)
{
    ((::KbdKeyBindingInfo*)NativePtr)->key = value;
}

int reaper_plugin_functions::KbdKeyBindingInfo::Cmd::get()
{
    return ((::KbdKeyBindingInfo*)NativePtr)->cmd;
}

void reaper_plugin_functions::KbdKeyBindingInfo::Cmd::set(int value)
{
    ((::KbdKeyBindingInfo*)NativePtr)->cmd = value;
}

int reaper_plugin_functions::KbdKeyBindingInfo::Flags::get()
{
    return ((::KbdKeyBindingInfo*)NativePtr)->flags;
}

void reaper_plugin_functions::KbdKeyBindingInfo::Flags::set(int value)
{
    ((::KbdKeyBindingInfo*)NativePtr)->flags = value;
}

reaper_plugin_functions::KbdSectionInfo::KbdSectionInfo(::KbdSectionInfo* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::KbdSectionInfo^ reaper_plugin_functions::KbdSectionInfo::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::KbdSectionInfo((::KbdSectionInfo*) native.ToPointer());
}

reaper_plugin_functions::KbdSectionInfo::KbdSectionInfo(::KbdSectionInfo* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::KbdSectionInfo^ reaper_plugin_functions::KbdSectionInfo::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::KbdSectionInfo((::KbdSectionInfo*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::KbdSectionInfo::~KbdSectionInfo()
{
    delete NativePtr;
}

reaper_plugin_functions::KbdSectionInfo::KbdSectionInfo()
{
    __ownsNativeInstance = true;
    NativePtr = new ::KbdSectionInfo();
}

reaper_plugin_functions::KbdSectionInfo::KbdSectionInfo(reaper_plugin_functions::KbdSectionInfo^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::KbdSectionInfo*)__0->NativePtr;
    NativePtr = new ::KbdSectionInfo(__arg0);
}

System::IntPtr reaper_plugin_functions::KbdSectionInfo::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::KbdSectionInfo::__Instance::set(System::IntPtr object)
{
    NativePtr = (::KbdSectionInfo*)object.ToPointer();
}

int reaper_plugin_functions::KbdSectionInfo::UniqueID::get()
{
    return ((::KbdSectionInfo*)NativePtr)->uniqueID;
}

void reaper_plugin_functions::KbdSectionInfo::UniqueID::set(int value)
{
    ((::KbdSectionInfo*)NativePtr)->uniqueID = value;
}

System::String^ reaper_plugin_functions::KbdSectionInfo::Name::get()
{
    return (((::KbdSectionInfo*)NativePtr)->name == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::KbdSectionInfo*)NativePtr)->name));
}

void reaper_plugin_functions::KbdSectionInfo::Name::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::KbdSectionInfo*)NativePtr)->name = _value.c_str();
}

reaper_plugin_functions::KbdCmd^ reaper_plugin_functions::KbdSectionInfo::ActionList::get()
{
    return (((::KbdSectionInfo*)NativePtr)->action_list == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::KbdCmd((::KbdCmd*)((::KbdSectionInfo*)NativePtr)->action_list);
}

void reaper_plugin_functions::KbdSectionInfo::ActionList::set(reaper_plugin_functions::KbdCmd^ value)
{
    ((::KbdSectionInfo*)NativePtr)->action_list = (::KbdCmd*)value->NativePtr;
}

int reaper_plugin_functions::KbdSectionInfo::ActionListCnt::get()
{
    return ((::KbdSectionInfo*)NativePtr)->action_list_cnt;
}

void reaper_plugin_functions::KbdSectionInfo::ActionListCnt::set(int value)
{
    ((::KbdSectionInfo*)NativePtr)->action_list_cnt = value;
}

reaper_plugin_functions::KbdKeyBindingInfo^ reaper_plugin_functions::KbdSectionInfo::DefKeys::get()
{
    return (((::KbdSectionInfo*)NativePtr)->def_keys == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::KbdKeyBindingInfo((::KbdKeyBindingInfo*)((::KbdSectionInfo*)NativePtr)->def_keys);
}

void reaper_plugin_functions::KbdSectionInfo::DefKeys::set(reaper_plugin_functions::KbdKeyBindingInfo^ value)
{
    ((::KbdSectionInfo*)NativePtr)->def_keys = (::KbdKeyBindingInfo*)value->NativePtr;
}

int reaper_plugin_functions::KbdSectionInfo::DefKeysCnt::get()
{
    return ((::KbdSectionInfo*)NativePtr)->def_keys_cnt;
}

void reaper_plugin_functions::KbdSectionInfo::DefKeysCnt::set(int value)
{
    ((::KbdSectionInfo*)NativePtr)->def_keys_cnt = value;
}

reaper_plugin_functions::KbdSectionInfo::Func_bool_int_int_int_int___IntPtr^ reaper_plugin_functions::KbdSectionInfo::OnAction::get()
{
    return ((::KbdSectionInfo*)NativePtr)->onAction == nullptr ? nullptr : safe_cast<reaper_plugin_functions::KbdSectionInfo::Func_bool_int_int_int_int___IntPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::KbdSectionInfo*)NativePtr)->onAction), reaper_plugin_functions::KbdSectionInfo::Func_bool_int_int_int_int___IntPtr::typeid));
}

void reaper_plugin_functions::KbdSectionInfo::OnAction::set(reaper_plugin_functions::KbdSectionInfo::Func_bool_int_int_int_int___IntPtr^ value)
{
    ((::KbdSectionInfo*)NativePtr)->onAction = static_cast<bool (*)(int, int, int, int, HWND)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

::System::IntPtr reaper_plugin_functions::KbdSectionInfo::Accels::get()
{
    return ::System::IntPtr(((::KbdSectionInfo*)NativePtr)->accels);
}

void reaper_plugin_functions::KbdSectionInfo::Accels::set(::System::IntPtr value)
{
    ((::KbdSectionInfo*)NativePtr)->accels = (void*)value;
}

::System::IntPtr reaper_plugin_functions::KbdSectionInfo::RecentCmds::get()
{
    return ::System::IntPtr(((::KbdSectionInfo*)NativePtr)->recent_cmds);
}

void reaper_plugin_functions::KbdSectionInfo::RecentCmds::set(::System::IntPtr value)
{
    ((::KbdSectionInfo*)NativePtr)->recent_cmds = (void*)value;
}

cli::array<::System::IntPtr>^ reaper_plugin_functions::KbdSectionInfo::ExtendedData::get()
{
    cli::array<::System::IntPtr>^ __array0 = nullptr;
    if (((::KbdSectionInfo*)NativePtr)->extended_data != 0)
    {
        __array0 = gcnew cli::array<::System::IntPtr>(32);
        for (int i = 0; i < 32; i++)
            __array0[i] = new ::System::IntPtr(((::KbdSectionInfo*)NativePtr)->extended_data[i]);
    }
    return __array0;
}

void reaper_plugin_functions::KbdSectionInfo::ExtendedData::set(cli::array<::System::IntPtr>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 32)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 32; i++)
            ((::KbdSectionInfo*)NativePtr)->extended_data[i] = value[i].ToPointer();
    }
}

reaper_plugin_functions::PreviewRegisterT::PreviewRegisterT(::preview_register_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::PreviewRegisterT^ reaper_plugin_functions::PreviewRegisterT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::PreviewRegisterT((::preview_register_t*) native.ToPointer());
}

reaper_plugin_functions::PreviewRegisterT::PreviewRegisterT(::preview_register_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::PreviewRegisterT^ reaper_plugin_functions::PreviewRegisterT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::PreviewRegisterT((::preview_register_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::PreviewRegisterT::~PreviewRegisterT()
{
    delete NativePtr;
}

reaper_plugin_functions::PreviewRegisterT::PreviewRegisterT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::preview_register_t();
}

reaper_plugin_functions::PreviewRegisterT::PreviewRegisterT(reaper_plugin_functions::PreviewRegisterT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::preview_register_t*)__0->NativePtr;
    NativePtr = new ::preview_register_t(__arg0);
}

System::IntPtr reaper_plugin_functions::PreviewRegisterT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::PreviewRegisterT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::preview_register_t*)object.ToPointer();
}

RTL_CRITICAL_SECTION^ reaper_plugin_functions::PreviewRegisterT::Cs::get()
{
    return (&((::preview_register_t*)NativePtr)->cs == nullptr) ? nullptr : gcnew ::RTL_CRITICAL_SECTION((::_RTL_CRITICAL_SECTION*)&((::preview_register_t*)NativePtr)->cs);
}

void reaper_plugin_functions::PreviewRegisterT::Cs::set(RTL_CRITICAL_SECTION^ value)
{
    if (ReferenceEquals(value, nullptr))
        throw gcnew ::System::ArgumentNullException("value", "Cannot be null because it is passed by value.");
    ((::preview_register_t*)NativePtr)->cs = *(::_RTL_CRITICAL_SECTION*)value->NativePtr;
}

reaper_plugin_functions::PCM_source^ reaper_plugin_functions::PreviewRegisterT::Src::get()
{
    return (((::preview_register_t*)NativePtr)->src == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::PCM_source((::PCM_source*)((::preview_register_t*)NativePtr)->src);
}

void reaper_plugin_functions::PreviewRegisterT::Src::set(reaper_plugin_functions::PCM_source^ value)
{
    ((::preview_register_t*)NativePtr)->src = (::PCM_source*)value->NativePtr;
}

int reaper_plugin_functions::PreviewRegisterT::MOutChan::get()
{
    return ((::preview_register_t*)NativePtr)->m_out_chan;
}

void reaper_plugin_functions::PreviewRegisterT::MOutChan::set(int value)
{
    ((::preview_register_t*)NativePtr)->m_out_chan = value;
}

double reaper_plugin_functions::PreviewRegisterT::Curpos::get()
{
    return ((::preview_register_t*)NativePtr)->curpos;
}

void reaper_plugin_functions::PreviewRegisterT::Curpos::set(double value)
{
    ((::preview_register_t*)NativePtr)->curpos = value;
}

bool reaper_plugin_functions::PreviewRegisterT::Loop::get()
{
    return ((::preview_register_t*)NativePtr)->loop;
}

void reaper_plugin_functions::PreviewRegisterT::Loop::set(bool value)
{
    ((::preview_register_t*)NativePtr)->loop = value;
}

double reaper_plugin_functions::PreviewRegisterT::Volume::get()
{
    return ((::preview_register_t*)NativePtr)->volume;
}

void reaper_plugin_functions::PreviewRegisterT::Volume::set(double value)
{
    ((::preview_register_t*)NativePtr)->volume = value;
}

cli::array<double>^ reaper_plugin_functions::PreviewRegisterT::Peakvol::get()
{
    cli::array<double>^ __array0 = nullptr;
    if (((::preview_register_t*)NativePtr)->peakvol != 0)
    {
        __array0 = gcnew cli::array<double>(2);
        for (int i = 0; i < 2; i++)
            __array0[i] = ((::preview_register_t*)NativePtr)->peakvol[i];
    }
    return __array0;
}

void reaper_plugin_functions::PreviewRegisterT::Peakvol::set(cli::array<double>^ value)
{
    if (value != nullptr)
    {
        if (value->Length != 2)
        {
            throw gcnew System::InvalidOperationException("Source array size must equal destination array size.");
        }
        for (int i = 0; i < 2; i++)
            ((::preview_register_t*)NativePtr)->peakvol[i] = value[i];
    }
}

::System::IntPtr reaper_plugin_functions::PreviewRegisterT::PreviewTrack::get()
{
    return ::System::IntPtr(((::preview_register_t*)NativePtr)->preview_track);
}

void reaper_plugin_functions::PreviewRegisterT::PreviewTrack::set(::System::IntPtr value)
{
    ((::preview_register_t*)NativePtr)->preview_track = (void*)value;
}

reaper_plugin_functions::MidiOutput::MidiOutput(::midi_Output* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::MidiOutput^ reaper_plugin_functions::MidiOutput::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::MidiOutput((::midi_Output*) native.ToPointer());
}

reaper_plugin_functions::MidiOutput::MidiOutput(::midi_Output* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::MidiOutput^ reaper_plugin_functions::MidiOutput::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::MidiOutput((::midi_Output*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::MidiOutput::~MidiOutput()
{
    delete NativePtr;
}

void reaper_plugin_functions::MidiOutput::BeginBlock()
{
    ((::midi_Output*)NativePtr)->BeginBlock();
}

void reaper_plugin_functions::MidiOutput::EndBlock(int length, double srate, double curtempo)
{
    ((::midi_Output*)NativePtr)->EndBlock(length, srate, curtempo);
}

void reaper_plugin_functions::MidiOutput::SendMsg(reaper_plugin_functions::MIDI_event_t^ msg, int frame_offset)
{
    auto __arg0 = (::MIDI_event_t*)msg->NativePtr;
    ((::midi_Output*)NativePtr)->SendMsg(__arg0, frame_offset);
}

void reaper_plugin_functions::MidiOutput::Send(unsigned char status, unsigned char d1, unsigned char d2, int frame_offset)
{
    ((::midi_Output*)NativePtr)->Send(status, d1, d2, frame_offset);
}

void reaper_plugin_functions::MidiOutput::Destroy()
{
    ((::midi_Output*)NativePtr)->Destroy();
}

reaper_plugin_functions::MidiOutput::MidiOutput()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::MidiOutput::MidiOutput(reaper_plugin_functions::MidiOutput^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::MidiOutput::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::MidiOutput::__Instance::set(System::IntPtr object)
{
    NativePtr = (::midi_Output*)object.ToPointer();
}
reaper_plugin_functions::MidiInput::MidiInput(::midi_Input* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::MidiInput^ reaper_plugin_functions::MidiInput::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::MidiInput((::midi_Input*) native.ToPointer());
}

reaper_plugin_functions::MidiInput::MidiInput(::midi_Input* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::MidiInput^ reaper_plugin_functions::MidiInput::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::MidiInput((::midi_Input*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::MidiInput::~MidiInput()
{
    delete NativePtr;
}

void reaper_plugin_functions::MidiInput::Start()
{
    ((::midi_Input*)NativePtr)->start();
}

void reaper_plugin_functions::MidiInput::Stop()
{
    ((::midi_Input*)NativePtr)->stop();
}

void reaper_plugin_functions::MidiInput::SwapBufs(unsigned int timestamp)
{
    ((::midi_Input*)NativePtr)->SwapBufs(timestamp);
}

void reaper_plugin_functions::MidiInput::RunPreNoteTracking(int isAccum)
{
    ((::midi_Input*)NativePtr)->RunPreNoteTracking(isAccum);
}

void reaper_plugin_functions::MidiInput::SwapBufsPrecise(unsigned int coarsetimestamp, double precisetimestamp)
{
    ((::midi_Input*)NativePtr)->SwapBufsPrecise(coarsetimestamp, precisetimestamp);
}

void reaper_plugin_functions::MidiInput::Destroy()
{
    ((::midi_Input*)NativePtr)->Destroy();
}

reaper_plugin_functions::MidiInput::MidiInput()
{
    __ownsNativeInstance = true;
}

reaper_plugin_functions::MidiInput::MidiInput(reaper_plugin_functions::MidiInput^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::MidiInput::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::MidiInput::__Instance::set(System::IntPtr object)
{
    NativePtr = (::midi_Input*)object.ToPointer();
}

reaper_plugin_functions::MIDI_eventlist^ reaper_plugin_functions::MidiInput::ReadBuf::get()
{
    auto __ret = ((::midi_Input*)NativePtr)->GetReadBuf();
    if (__ret == nullptr) return nullptr;
    return (__ret == nullptr) ? nullptr : gcnew ::reaper_plugin_functions::MIDI_eventlist((::MIDI_eventlist*)__ret);
}

reaper_plugin_functions::IReaperControlSurface::IReaperControlSurface(::IReaperControlSurface* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::IReaperControlSurface^ reaper_plugin_functions::IReaperControlSurface::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::IReaperControlSurface((::IReaperControlSurface*) native.ToPointer());
}

reaper_plugin_functions::IReaperControlSurface::IReaperControlSurface(::IReaperControlSurface* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::IReaperControlSurface^ reaper_plugin_functions::IReaperControlSurface::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::IReaperControlSurface((::IReaperControlSurface*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::IReaperControlSurface::~IReaperControlSurface()
{
    delete NativePtr;
}

reaper_plugin_functions::IReaperControlSurface::IReaperControlSurface()
{
    __ownsNativeInstance = true;
}

void reaper_plugin_functions::IReaperControlSurface::CloseNoReset()
{
    ((::IReaperControlSurface*)NativePtr)->CloseNoReset();
}

void reaper_plugin_functions::IReaperControlSurface::Run()
{
    ((::IReaperControlSurface*)NativePtr)->Run();
}

void reaper_plugin_functions::IReaperControlSurface::SetTrackListChange()
{
    ((::IReaperControlSurface*)NativePtr)->SetTrackListChange();
}

void reaper_plugin_functions::IReaperControlSurface::SetPlayState(bool play, bool pause, bool rec)
{
    ((::IReaperControlSurface*)NativePtr)->SetPlayState(play, pause, rec);
}

void reaper_plugin_functions::IReaperControlSurface::SetRepeatState(bool rep)
{
    ((::IReaperControlSurface*)NativePtr)->SetRepeatState(rep);
}

void reaper_plugin_functions::IReaperControlSurface::SetAutoMode(int mode)
{
    ((::IReaperControlSurface*)NativePtr)->SetAutoMode(mode);
}

void reaper_plugin_functions::IReaperControlSurface::ResetCachedVolPanStates()
{
    ((::IReaperControlSurface*)NativePtr)->ResetCachedVolPanStates();
}

bool reaper_plugin_functions::IReaperControlSurface::IsKeyDown(int key)
{
    auto __ret = ((::IReaperControlSurface*)NativePtr)->IsKeyDown(key);
    return __ret;
}

int reaper_plugin_functions::IReaperControlSurface::Extended(int call, ::System::IntPtr parm1, ::System::IntPtr parm2, ::System::IntPtr parm3)
{
    auto __arg1 = (void*)parm1;
    auto __arg2 = (void*)parm2;
    auto __arg3 = (void*)parm3;
    auto __ret = ((::IReaperControlSurface*)NativePtr)->Extended(call, __arg1, __arg2, __arg3);
    return __ret;
}

reaper_plugin_functions::IReaperControlSurface::IReaperControlSurface(reaper_plugin_functions::IReaperControlSurface^ _0)
{
    __ownsNativeInstance = true;
}

System::IntPtr reaper_plugin_functions::IReaperControlSurface::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::IReaperControlSurface::__Instance::set(System::IntPtr object)
{
    NativePtr = (::IReaperControlSurface*)object.ToPointer();
}

System::String^ reaper_plugin_functions::IReaperControlSurface::TypeString::get()
{
    auto __ret = ((::IReaperControlSurface*)NativePtr)->GetTypeString();
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

System::String^ reaper_plugin_functions::IReaperControlSurface::DescString::get()
{
    auto __ret = ((::IReaperControlSurface*)NativePtr)->GetDescString();
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

System::String^ reaper_plugin_functions::IReaperControlSurface::ConfigString::get()
{
    auto __ret = ((::IReaperControlSurface*)NativePtr)->GetConfigString();
    if (__ret == nullptr) return nullptr;
    return (__ret == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(__ret));
}

reaper_plugin_functions::ReaperCsurfRegT::ReaperCsurfRegT(::reaper_csurf_reg_t* native)
    : __ownsNativeInstance(false)
{
    NativePtr = native;
}

reaper_plugin_functions::ReaperCsurfRegT^ reaper_plugin_functions::ReaperCsurfRegT::__CreateInstance(::System::IntPtr native)
{
    return gcnew ::reaper_plugin_functions::ReaperCsurfRegT((::reaper_csurf_reg_t*) native.ToPointer());
}

reaper_plugin_functions::ReaperCsurfRegT::ReaperCsurfRegT(::reaper_csurf_reg_t* native, bool ownNativeInstance)
    : __ownsNativeInstance(ownNativeInstance)
{
    NativePtr = native;
}

reaper_plugin_functions::ReaperCsurfRegT^ reaper_plugin_functions::ReaperCsurfRegT::__CreateInstance(::System::IntPtr native, bool __ownsNativeInstance)
{
    return gcnew ::reaper_plugin_functions::ReaperCsurfRegT((::reaper_csurf_reg_t*) native.ToPointer(), __ownsNativeInstance);
}

reaper_plugin_functions::ReaperCsurfRegT::~ReaperCsurfRegT()
{
    delete NativePtr;
}

reaper_plugin_functions::ReaperCsurfRegT::ReaperCsurfRegT()
{
    __ownsNativeInstance = true;
    NativePtr = new ::reaper_csurf_reg_t();
}

reaper_plugin_functions::ReaperCsurfRegT::ReaperCsurfRegT(reaper_plugin_functions::ReaperCsurfRegT^ __0)
{
    __ownsNativeInstance = true;
    if (ReferenceEquals(__0, nullptr))
        throw gcnew ::System::ArgumentNullException("__0", "Cannot be null because it is a C++ reference (&).");
    auto &__arg0 = *(::reaper_csurf_reg_t*)__0->NativePtr;
    NativePtr = new ::reaper_csurf_reg_t(__arg0);
}

System::IntPtr reaper_plugin_functions::ReaperCsurfRegT::__Instance::get()
{
    return System::IntPtr(NativePtr);
}

void reaper_plugin_functions::ReaperCsurfRegT::__Instance::set(System::IntPtr object)
{
    NativePtr = (::reaper_csurf_reg_t*)object.ToPointer();
}

System::String^ reaper_plugin_functions::ReaperCsurfRegT::TypeString::get()
{
    return (((::reaper_csurf_reg_t*)NativePtr)->type_string == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::reaper_csurf_reg_t*)NativePtr)->type_string));
}

void reaper_plugin_functions::ReaperCsurfRegT::TypeString::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::reaper_csurf_reg_t*)NativePtr)->type_string = _value.c_str();
}

System::String^ reaper_plugin_functions::ReaperCsurfRegT::DescString::get()
{
    return (((::reaper_csurf_reg_t*)NativePtr)->desc_string == 0 ? nullptr : clix::marshalString<clix::E_UTF8>(((::reaper_csurf_reg_t*)NativePtr)->desc_string));
}

void reaper_plugin_functions::ReaperCsurfRegT::DescString::set(System::String^ value)
{
    auto _value = clix::marshalString<clix::E_UTF8>(value);
    ((::reaper_csurf_reg_t*)NativePtr)->desc_string = _value.c_str();
}

reaper_plugin_functions::ReaperCsurfRegT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_intPtr^ reaper_plugin_functions::ReaperCsurfRegT::Create::get()
{
    return ((::reaper_csurf_reg_t*)NativePtr)->create == nullptr ? nullptr : safe_cast<reaper_plugin_functions::ReaperCsurfRegT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_intPtr^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::reaper_csurf_reg_t*)NativePtr)->create), reaper_plugin_functions::ReaperCsurfRegT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_intPtr::typeid));
}

void reaper_plugin_functions::ReaperCsurfRegT::Create::set(reaper_plugin_functions::ReaperCsurfRegT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string_intPtr^ value)
{
    ((::reaper_csurf_reg_t*)NativePtr)->create = static_cast<::IReaperControlSurface* (*)(void*, void*, int*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

reaper_plugin_functions::ReaperCsurfRegT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^ reaper_plugin_functions::ReaperCsurfRegT::ShowConfig::get()
{
    return ((::reaper_csurf_reg_t*)NativePtr)->ShowConfig == nullptr ? nullptr : safe_cast<reaper_plugin_functions::ReaperCsurfRegT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^>(System::Runtime::InteropServices::Marshal::GetDelegateForFunctionPointer(IntPtr(((::reaper_csurf_reg_t*)NativePtr)->ShowConfig), reaper_plugin_functions::ReaperCsurfRegT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string::typeid));
}

void reaper_plugin_functions::ReaperCsurfRegT::ShowConfig::set(reaper_plugin_functions::ReaperCsurfRegT::Func___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string___IntPtr_[MarshalAs(UnmanagedType_CustomMarshaler,_MarshalTypeRef_=_typeof(CppSharp_Runtime_UTF8Marshaller))]_string^ value)
{
    ((::reaper_csurf_reg_t*)NativePtr)->ShowConfig = static_cast<HWND (*)(void*, HWND, void*)>(System::Runtime::InteropServices::Marshal::GetFunctionPointerForDelegate(value).ToPointer());
}

// DEBUG: static int REAPER_BSWAPINT(int x)
// DEBUG: {
// DEBUG:   return ((((x))&0xff)<<24)|((((x))&0xff00)<<8)|((((x))&0xff0000)>>8)|(((x)>>24)&0xff);
// DEBUG: }
int reaper_plugin_functions::reaper_plugin::REAPER_BSWAPINT(int x)
{
    auto __ret = ::REAPER_BSWAPINT(x);
    return __ret;
}

// DEBUG: static void REAPER_BSWAPINTMEM(void *buf)
// DEBUG: {
// DEBUG:   char *p=(char *)buf;
// DEBUG:   char tmp=p[0]; p[0]=p[3]; p[3]=tmp;
// DEBUG:   tmp=p[1]; p[1]=p[2]; p[2]=tmp;
// DEBUG: }
void reaper_plugin_functions::reaper_plugin::REAPER_BSWAPINTMEM(::System::IntPtr buf)
{
    auto __arg0 = (void*)buf;
    ::REAPER_BSWAPINTMEM(__arg0);
}

// DEBUG: static void REAPER_BSWAPINTMEM8(void *buf)
// DEBUG: {
// DEBUG:   char *p=(char *)buf;
// DEBUG:   char tmp=p[0]; p[0]=p[7]; p[7]=tmp;
// DEBUG:   tmp=p[1]; p[1]=p[6]; p[6]=tmp;
// DEBUG:   tmp=p[2]; p[2]=p[5]; p[5]=tmp;
// DEBUG:   tmp=p[3]; p[3]=p[4]; p[4]=tmp;
// DEBUG: }
void reaper_plugin_functions::reaper_plugin::REAPER_BSWAPINTMEM8(::System::IntPtr buf)
{
    auto __arg0 = (void*)buf;
    ::REAPER_BSWAPINTMEM8(__arg0);
}

